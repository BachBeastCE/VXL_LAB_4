
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e28  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f34  08002f34  00003f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f58  08002f58  0000407c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f58  08002f58  0000407c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f58  08002f58  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f58  08002f58  00003f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f5c  08002f5c  00003f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08002f60  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000007c  08002fdc  0000407c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08002fdc  000043b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d09  00000000  00000000  000040a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ce  00000000  00000000  0000cdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0000ee80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000861  00000000  00000000  0000f990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001737c  00000000  00000000  000101f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc76  00000000  00000000  0002756d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082ca4  00000000  00000000  000351e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7e87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad0  00000000  00000000  000b7ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000ba99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f1c 	.word	0x08002f1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08002f1c 	.word	0x08002f1c

0800014c <display7SEG>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer [4] = {1, 2, 3, 4};

void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (num){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG+0x310>
 800015c:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	case 0:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b4      	ldr	r0, [pc, #720]	@ (8000464 <display7SEG+0x318>)
 8000192:	f001 fe58 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b2      	ldr	r0, [pc, #712]	@ (8000464 <display7SEG+0x318>)
 800019c:	f001 fe53 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48af      	ldr	r0, [pc, #700]	@ (8000464 <display7SEG+0x318>)
 80001a6:	f001 fe4e 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ad      	ldr	r0, [pc, #692]	@ (8000464 <display7SEG+0x318>)
 80001b0:	f001 fe49 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48aa      	ldr	r0, [pc, #680]	@ (8000464 <display7SEG+0x318>)
 80001ba:	f001 fe44 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a8      	ldr	r0, [pc, #672]	@ (8000464 <display7SEG+0x318>)
 80001c4:	f001 fe3f 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	@ 0x40
 80001cc:	48a5      	ldr	r0, [pc, #660]	@ (8000464 <display7SEG+0x318>)
 80001ce:	f001 fe3a 	bl	8001e46 <HAL_GPIO_WritePin>
	    break;
 80001d2:	e143      	b.n	800045c <display7SEG+0x310>
	}
	case 1:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a2      	ldr	r0, [pc, #648]	@ (8000464 <display7SEG+0x318>)
 80001da:	f001 fe34 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a0      	ldr	r0, [pc, #640]	@ (8000464 <display7SEG+0x318>)
 80001e4:	f001 fe2f 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489d      	ldr	r0, [pc, #628]	@ (8000464 <display7SEG+0x318>)
 80001ee:	f001 fe2a 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489b      	ldr	r0, [pc, #620]	@ (8000464 <display7SEG+0x318>)
 80001f8:	f001 fe25 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4898      	ldr	r0, [pc, #608]	@ (8000464 <display7SEG+0x318>)
 8000202:	f001 fe20 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4896      	ldr	r0, [pc, #600]	@ (8000464 <display7SEG+0x318>)
 800020c:	f001 fe1b 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	@ 0x40
 8000214:	4893      	ldr	r0, [pc, #588]	@ (8000464 <display7SEG+0x318>)
 8000216:	f001 fe16 	bl	8001e46 <HAL_GPIO_WritePin>
	    break;
 800021a:	e11f      	b.n	800045c <display7SEG+0x310>
	}
	case 2:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4890      	ldr	r0, [pc, #576]	@ (8000464 <display7SEG+0x318>)
 8000222:	f001 fe10 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488e      	ldr	r0, [pc, #568]	@ (8000464 <display7SEG+0x318>)
 800022c:	f001 fe0b 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488b      	ldr	r0, [pc, #556]	@ (8000464 <display7SEG+0x318>)
 8000236:	f001 fe06 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	4889      	ldr	r0, [pc, #548]	@ (8000464 <display7SEG+0x318>)
 8000240:	f001 fe01 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4886      	ldr	r0, [pc, #536]	@ (8000464 <display7SEG+0x318>)
 800024a:	f001 fdfc 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4884      	ldr	r0, [pc, #528]	@ (8000464 <display7SEG+0x318>)
 8000254:	f001 fdf7 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	@ 0x40
 800025c:	4881      	ldr	r0, [pc, #516]	@ (8000464 <display7SEG+0x318>)
 800025e:	f001 fdf2 	bl	8001e46 <HAL_GPIO_WritePin>
	    break;
 8000262:	e0fb      	b.n	800045c <display7SEG+0x310>
	}
	case 3:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487e      	ldr	r0, [pc, #504]	@ (8000464 <display7SEG+0x318>)
 800026a:	f001 fdec 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487c      	ldr	r0, [pc, #496]	@ (8000464 <display7SEG+0x318>)
 8000274:	f001 fde7 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	4879      	ldr	r0, [pc, #484]	@ (8000464 <display7SEG+0x318>)
 800027e:	f001 fde2 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4877      	ldr	r0, [pc, #476]	@ (8000464 <display7SEG+0x318>)
 8000288:	f001 fddd 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4874      	ldr	r0, [pc, #464]	@ (8000464 <display7SEG+0x318>)
 8000292:	f001 fdd8 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4872      	ldr	r0, [pc, #456]	@ (8000464 <display7SEG+0x318>)
 800029c:	f001 fdd3 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	@ 0x40
 80002a4:	486f      	ldr	r0, [pc, #444]	@ (8000464 <display7SEG+0x318>)
 80002a6:	f001 fdce 	bl	8001e46 <HAL_GPIO_WritePin>
	    break;
 80002aa:	e0d7      	b.n	800045c <display7SEG+0x310>
	}
	case 4:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486c      	ldr	r0, [pc, #432]	@ (8000464 <display7SEG+0x318>)
 80002b2:	f001 fdc8 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486a      	ldr	r0, [pc, #424]	@ (8000464 <display7SEG+0x318>)
 80002bc:	f001 fdc3 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4867      	ldr	r0, [pc, #412]	@ (8000464 <display7SEG+0x318>)
 80002c6:	f001 fdbe 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4865      	ldr	r0, [pc, #404]	@ (8000464 <display7SEG+0x318>)
 80002d0:	f001 fdb9 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4862      	ldr	r0, [pc, #392]	@ (8000464 <display7SEG+0x318>)
 80002da:	f001 fdb4 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4860      	ldr	r0, [pc, #384]	@ (8000464 <display7SEG+0x318>)
 80002e4:	f001 fdaf 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	@ 0x40
 80002ec:	485d      	ldr	r0, [pc, #372]	@ (8000464 <display7SEG+0x318>)
 80002ee:	f001 fdaa 	bl	8001e46 <HAL_GPIO_WritePin>
	    break;
 80002f2:	e0b3      	b.n	800045c <display7SEG+0x310>
	}
	case 5:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485a      	ldr	r0, [pc, #360]	@ (8000464 <display7SEG+0x318>)
 80002fa:	f001 fda4 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4858      	ldr	r0, [pc, #352]	@ (8000464 <display7SEG+0x318>)
 8000304:	f001 fd9f 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4855      	ldr	r0, [pc, #340]	@ (8000464 <display7SEG+0x318>)
 800030e:	f001 fd9a 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4853      	ldr	r0, [pc, #332]	@ (8000464 <display7SEG+0x318>)
 8000318:	f001 fd95 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4850      	ldr	r0, [pc, #320]	@ (8000464 <display7SEG+0x318>)
 8000322:	f001 fd90 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484e      	ldr	r0, [pc, #312]	@ (8000464 <display7SEG+0x318>)
 800032c:	f001 fd8b 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	@ 0x40
 8000334:	484b      	ldr	r0, [pc, #300]	@ (8000464 <display7SEG+0x318>)
 8000336:	f001 fd86 	bl	8001e46 <HAL_GPIO_WritePin>
	    break;
 800033a:	e08f      	b.n	800045c <display7SEG+0x310>
	}
	case 6:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4848      	ldr	r0, [pc, #288]	@ (8000464 <display7SEG+0x318>)
 8000342:	f001 fd80 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4846      	ldr	r0, [pc, #280]	@ (8000464 <display7SEG+0x318>)
 800034c:	f001 fd7b 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4843      	ldr	r0, [pc, #268]	@ (8000464 <display7SEG+0x318>)
 8000356:	f001 fd76 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4841      	ldr	r0, [pc, #260]	@ (8000464 <display7SEG+0x318>)
 8000360:	f001 fd71 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483e      	ldr	r0, [pc, #248]	@ (8000464 <display7SEG+0x318>)
 800036a:	f001 fd6c 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483c      	ldr	r0, [pc, #240]	@ (8000464 <display7SEG+0x318>)
 8000374:	f001 fd67 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	@ 0x40
 800037c:	4839      	ldr	r0, [pc, #228]	@ (8000464 <display7SEG+0x318>)
 800037e:	f001 fd62 	bl	8001e46 <HAL_GPIO_WritePin>
	    break;
 8000382:	e06b      	b.n	800045c <display7SEG+0x310>
	}
	case 7:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4836      	ldr	r0, [pc, #216]	@ (8000464 <display7SEG+0x318>)
 800038a:	f001 fd5c 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4834      	ldr	r0, [pc, #208]	@ (8000464 <display7SEG+0x318>)
 8000394:	f001 fd57 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4831      	ldr	r0, [pc, #196]	@ (8000464 <display7SEG+0x318>)
 800039e:	f001 fd52 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	482f      	ldr	r0, [pc, #188]	@ (8000464 <display7SEG+0x318>)
 80003a8:	f001 fd4d 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482c      	ldr	r0, [pc, #176]	@ (8000464 <display7SEG+0x318>)
 80003b2:	f001 fd48 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482a      	ldr	r0, [pc, #168]	@ (8000464 <display7SEG+0x318>)
 80003bc:	f001 fd43 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	@ 0x40
 80003c4:	4827      	ldr	r0, [pc, #156]	@ (8000464 <display7SEG+0x318>)
 80003c6:	f001 fd3e 	bl	8001e46 <HAL_GPIO_WritePin>
	    break;
 80003ca:	e047      	b.n	800045c <display7SEG+0x310>
	}
	case 8:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4824      	ldr	r0, [pc, #144]	@ (8000464 <display7SEG+0x318>)
 80003d2:	f001 fd38 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4822      	ldr	r0, [pc, #136]	@ (8000464 <display7SEG+0x318>)
 80003dc:	f001 fd33 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	481f      	ldr	r0, [pc, #124]	@ (8000464 <display7SEG+0x318>)
 80003e6:	f001 fd2e 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481d      	ldr	r0, [pc, #116]	@ (8000464 <display7SEG+0x318>)
 80003f0:	f001 fd29 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481a      	ldr	r0, [pc, #104]	@ (8000464 <display7SEG+0x318>)
 80003fa:	f001 fd24 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4818      	ldr	r0, [pc, #96]	@ (8000464 <display7SEG+0x318>)
 8000404:	f001 fd1f 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	@ 0x40
 800040c:	4815      	ldr	r0, [pc, #84]	@ (8000464 <display7SEG+0x318>)
 800040e:	f001 fd1a 	bl	8001e46 <HAL_GPIO_WritePin>
	    break;
 8000412:	e023      	b.n	800045c <display7SEG+0x310>
	}
	case 9:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4812      	ldr	r0, [pc, #72]	@ (8000464 <display7SEG+0x318>)
 800041a:	f001 fd14 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4810      	ldr	r0, [pc, #64]	@ (8000464 <display7SEG+0x318>)
 8000424:	f001 fd0f 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480d      	ldr	r0, [pc, #52]	@ (8000464 <display7SEG+0x318>)
 800042e:	f001 fd0a 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480b      	ldr	r0, [pc, #44]	@ (8000464 <display7SEG+0x318>)
 8000438:	f001 fd05 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4808      	ldr	r0, [pc, #32]	@ (8000464 <display7SEG+0x318>)
 8000442:	f001 fd00 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4806      	ldr	r0, [pc, #24]	@ (8000464 <display7SEG+0x318>)
 800044c:	f001 fcfb 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	@ 0x40
 8000454:	4803      	ldr	r0, [pc, #12]	@ (8000464 <display7SEG+0x318>)
 8000456:	f001 fcf6 	bl	8001e46 <HAL_GPIO_WritePin>
	    break;
 800045a:	bf00      	nop
	}
	}
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010c00 	.word	0x40010c00

08000468 <update7SEG>:

void update7SEG ( int index ){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	switch ( index ){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b03      	cmp	r3, #3
 8000474:	d87e      	bhi.n	8000574 <update7SEG+0x10c>
 8000476:	a201      	add	r2, pc, #4	@ (adr r2, 800047c <update7SEG+0x14>)
 8000478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047c:	0800048d 	.word	0x0800048d
 8000480:	080004c7 	.word	0x080004c7
 8000484:	08000501 	.word	0x08000501
 8000488:	0800053b 	.word	0x0800053b
	case 0:{
		// Display the first 7 SEG with led_buffer [0]
		display7SEG(led_buffer[0]);
 800048c:	4b3b      	ldr	r3, [pc, #236]	@ (800057c <update7SEG+0x114>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fe5b 	bl	800014c <display7SEG>
		HAL_GPIO_WritePin(GPIOB, EN0, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2180      	movs	r1, #128	@ 0x80
 800049a:	4839      	ldr	r0, [pc, #228]	@ (8000580 <update7SEG+0x118>)
 800049c:	f001 fcd3 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN1, GPIO_PIN_SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004a6:	4836      	ldr	r0, [pc, #216]	@ (8000580 <update7SEG+0x118>)
 80004a8:	f001 fccd 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2, GPIO_PIN_SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004b2:	4833      	ldr	r0, [pc, #204]	@ (8000580 <update7SEG+0x118>)
 80004b4:	f001 fcc7 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN3, GPIO_PIN_SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004be:	4830      	ldr	r0, [pc, #192]	@ (8000580 <update7SEG+0x118>)
 80004c0:	f001 fcc1 	bl	8001e46 <HAL_GPIO_WritePin>
		break ;
 80004c4:	e056      	b.n	8000574 <update7SEG+0x10c>
	}
	case 1:{
		// Display the second 7 SEG with led_buffer [1]
		display7SEG(led_buffer[1]);
 80004c6:	4b2d      	ldr	r3, [pc, #180]	@ (800057c <update7SEG+0x114>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fe3e 	bl	800014c <display7SEG>
	    HAL_GPIO_WritePin(GPIOB, EN0, GPIO_PIN_SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2180      	movs	r1, #128	@ 0x80
 80004d4:	482a      	ldr	r0, [pc, #168]	@ (8000580 <update7SEG+0x118>)
 80004d6:	f001 fcb6 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, EN1, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004e0:	4827      	ldr	r0, [pc, #156]	@ (8000580 <update7SEG+0x118>)
 80004e2:	f001 fcb0 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2, GPIO_PIN_SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004ec:	4824      	ldr	r0, [pc, #144]	@ (8000580 <update7SEG+0x118>)
 80004ee:	f001 fcaa 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN3, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004f8:	4821      	ldr	r0, [pc, #132]	@ (8000580 <update7SEG+0x118>)
 80004fa:	f001 fca4 	bl	8001e46 <HAL_GPIO_WritePin>
		break ;
 80004fe:	e039      	b.n	8000574 <update7SEG+0x10c>
	}
	case 2:{
		// Display the third 7 SEG with led_buffer [2]
		display7SEG(led_buffer[2]);
 8000500:	4b1e      	ldr	r3, [pc, #120]	@ (800057c <update7SEG+0x114>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe21 	bl	800014c <display7SEG>
	    HAL_GPIO_WritePin(GPIOB, EN0, GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2180      	movs	r1, #128	@ 0x80
 800050e:	481c      	ldr	r0, [pc, #112]	@ (8000580 <update7SEG+0x118>)
 8000510:	f001 fc99 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, EN1, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800051a:	4819      	ldr	r0, [pc, #100]	@ (8000580 <update7SEG+0x118>)
 800051c:	f001 fc93 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000526:	4816      	ldr	r0, [pc, #88]	@ (8000580 <update7SEG+0x118>)
 8000528:	f001 fc8d 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN3, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000532:	4813      	ldr	r0, [pc, #76]	@ (8000580 <update7SEG+0x118>)
 8000534:	f001 fc87 	bl	8001e46 <HAL_GPIO_WritePin>
		break ;
 8000538:	e01c      	b.n	8000574 <update7SEG+0x10c>
	}
	case 3:
	{
		// Display the forth 7 SEG with led_buffer [3]
		display7SEG(led_buffer[3]);
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <update7SEG+0x114>)
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff fe04 	bl	800014c <display7SEG>
	    HAL_GPIO_WritePin(GPIOB, EN0, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2180      	movs	r1, #128	@ 0x80
 8000548:	480d      	ldr	r0, [pc, #52]	@ (8000580 <update7SEG+0x118>)
 800054a:	f001 fc7c 	bl	8001e46 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, EN1, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000554:	480a      	ldr	r0, [pc, #40]	@ (8000580 <update7SEG+0x118>)
 8000556:	f001 fc76 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000560:	4807      	ldr	r0, [pc, #28]	@ (8000580 <update7SEG+0x118>)
 8000562:	f001 fc70 	bl	8001e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN3, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800056c:	4804      	ldr	r0, [pc, #16]	@ (8000580 <update7SEG+0x118>)
 800056e:	f001 fc6a 	bl	8001e46 <HAL_GPIO_WritePin>
		break ;
 8000572:	bf00      	nop
	}
	}
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000000 	.word	0x20000000
 8000580:	40010c00 	.word	0x40010c00

08000584 <run7SEG>:

void run7SEG(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	update7SEG (index_led++);
 8000588:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <run7SEG+0x28>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	1c5a      	adds	r2, r3, #1
 800058e:	4907      	ldr	r1, [pc, #28]	@ (80005ac <run7SEG+0x28>)
 8000590:	600a      	str	r2, [r1, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff68 	bl	8000468 <update7SEG>
	if(index_led == MAX_LED){index_led=0;}
 8000598:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <run7SEG+0x28>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2204      	movs	r2, #4
 800059e:	4293      	cmp	r3, r2
 80005a0:	d102      	bne.n	80005a8 <run7SEG+0x24>
 80005a2:	4b02      	ldr	r3, [pc, #8]	@ (80005ac <run7SEG+0x28>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000098 	.word	0x20000098

080005b0 <isButtonPressed>:

//int button1_pressed = 0;
//int button1_long_pressed = 0;
//int button1_flag = 0;

int isButtonPressed(int button_index){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	if(button_flag[button_index] == 1){
 80005b8:	4a09      	ldr	r2, [pc, #36]	@ (80005e0 <isButtonPressed+0x30>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d106      	bne.n	80005d2 <isButtonPressed+0x22>
		button_flag[button_index] = 0;
 80005c4:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <isButtonPressed+0x30>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2100      	movs	r1, #0
 80005ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e000      	b.n	80005d4 <isButtonPressed+0x24>
	}
	return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	2000009c 	.word	0x2000009c

080005e4 <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button_flag[button_index] = 1;
}

void getKeyInput(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_BUTTON;i++){
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	e07b      	b.n	80006e8 <getKeyInput+0x104>
		 KeyReg2[i] = KeyReg1[i];
 80005f0:	4a42      	ldr	r2, [pc, #264]	@ (80006fc <getKeyInput+0x118>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f8:	4941      	ldr	r1, [pc, #260]	@ (8000700 <getKeyInput+0x11c>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 KeyReg1[i] = KeyReg0[i];
 8000600:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <getKeyInput+0x120>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000608:	493c      	ldr	r1, [pc, #240]	@ (80006fc <getKeyInput+0x118>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  // Add your key
		 KeyReg0[0] = HAL_GPIO_ReadPin(GPIOA, MODIFY_BUTTON);
 8000610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000614:	483c      	ldr	r0, [pc, #240]	@ (8000708 <getKeyInput+0x124>)
 8000616:	f001 fbff 	bl	8001e18 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	4b39      	ldr	r3, [pc, #228]	@ (8000704 <getKeyInput+0x120>)
 8000620:	601a      	str	r2, [r3, #0]
		 KeyReg0[1] = HAL_GPIO_ReadPin(GPIOA, MODE_BUTTON);
 8000622:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000626:	4838      	ldr	r0, [pc, #224]	@ (8000708 <getKeyInput+0x124>)
 8000628:	f001 fbf6 	bl	8001e18 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <getKeyInput+0x120>)
 8000632:	605a      	str	r2, [r3, #4]
		 KeyReg0[2] = HAL_GPIO_ReadPin(GPIOA, CHOOSE_BUTTON);
 8000634:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000638:	4833      	ldr	r0, [pc, #204]	@ (8000708 <getKeyInput+0x124>)
 800063a:	f001 fbed 	bl	8001e18 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	4b30      	ldr	r3, [pc, #192]	@ (8000704 <getKeyInput+0x120>)
 8000644:	609a      	str	r2, [r3, #8]

		 if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000646:	4a2d      	ldr	r2, [pc, #180]	@ (80006fc <getKeyInput+0x118>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800064e:	492d      	ldr	r1, [pc, #180]	@ (8000704 <getKeyInput+0x120>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000656:	429a      	cmp	r2, r3
 8000658:	d143      	bne.n	80006e2 <getKeyInput+0xfe>
 800065a:	4a28      	ldr	r2, [pc, #160]	@ (80006fc <getKeyInput+0x118>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000662:	4927      	ldr	r1, [pc, #156]	@ (8000700 <getKeyInput+0x11c>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800066a:	429a      	cmp	r2, r3
 800066c:	d139      	bne.n	80006e2 <getKeyInput+0xfe>
			 if (KeyReg2[i] != KeyReg3[i]){
 800066e:	4a24      	ldr	r2, [pc, #144]	@ (8000700 <getKeyInput+0x11c>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000676:	4925      	ldr	r1, [pc, #148]	@ (800070c <getKeyInput+0x128>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800067e:	429a      	cmp	r2, r3
 8000680:	d017      	beq.n	80006b2 <getKeyInput+0xce>
				 KeyReg3[i] = KeyReg2[i];
 8000682:	4a1f      	ldr	r2, [pc, #124]	@ (8000700 <getKeyInput+0x11c>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800068a:	4920      	ldr	r1, [pc, #128]	@ (800070c <getKeyInput+0x128>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				 if (KeyReg3[i] == PRESSED_STATE){
 8000692:	4a1e      	ldr	r2, [pc, #120]	@ (800070c <getKeyInput+0x128>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d121      	bne.n	80006e2 <getKeyInput+0xfe>
					 TimeOutForKeyPress = 500;
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <getKeyInput+0x12c>)
 80006a0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006a4:	601a      	str	r2, [r3, #0]
					 //subKeyProcess();
					 button_flag[i] = 1;
 80006a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000714 <getKeyInput+0x130>)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2101      	movs	r1, #1
 80006ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80006b0:	e017      	b.n	80006e2 <getKeyInput+0xfe>
				 }
			 }
			 else{
				 TimeOutForKeyPress --;
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <getKeyInput+0x12c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	4a15      	ldr	r2, [pc, #84]	@ (8000710 <getKeyInput+0x12c>)
 80006ba:	6013      	str	r3, [r2, #0]
				 if (TimeOutForKeyPress == 0){
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <getKeyInput+0x12c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d10e      	bne.n	80006e2 <getKeyInput+0xfe>
					 TimeOutForKeyPress = 500;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <getKeyInput+0x12c>)
 80006c6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006ca:	601a      	str	r2, [r3, #0]
					 if (KeyReg3[i] == PRESSED_STATE){
 80006cc:	4a0f      	ldr	r2, [pc, #60]	@ (800070c <getKeyInput+0x128>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d104      	bne.n	80006e2 <getKeyInput+0xfe>
		        		//subKeyProcess();
						 button_flag[i] = 1;
 80006d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000714 <getKeyInput+0x130>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2101      	movs	r1, #1
 80006de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<MAX_BUTTON;i++){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3301      	adds	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	2205      	movs	r2, #5
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4293      	cmp	r3, r2
 80006ee:	f6ff af7f 	blt.w	80005f0 <getKeyInput+0xc>




	}
}
 80006f2:	bf00      	nop
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000024 	.word	0x20000024
 8000700:	20000038 	.word	0x20000038
 8000704:	20000010 	.word	0x20000010
 8000708:	40010800 	.word	0x40010800
 800070c:	2000004c 	.word	0x2000004c
 8000710:	20000060 	.word	0x20000060
 8000714:	2000009c 	.word	0x2000009c

08000718 <displayCounter>:
int count1 =0;
int count2 =0;
int count3 =0;


void displayCounter(){
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	led_buffer[0]=count1/10;
 800071c:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <displayCounter+0x70>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a1a      	ldr	r2, [pc, #104]	@ (800078c <displayCounter+0x74>)
 8000722:	fb82 1203 	smull	r1, r2, r2, r3
 8000726:	1092      	asrs	r2, r2, #2
 8000728:	17db      	asrs	r3, r3, #31
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <displayCounter+0x78>)
 800072e:	6013      	str	r3, [r2, #0]
	led_buffer[1]=count1%10;
 8000730:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <displayCounter+0x70>)
 8000732:	6819      	ldr	r1, [r3, #0]
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <displayCounter+0x74>)
 8000736:	fb83 2301 	smull	r2, r3, r3, r1
 800073a:	109a      	asrs	r2, r3, #2
 800073c:	17cb      	asrs	r3, r1, #31
 800073e:	1ad2      	subs	r2, r2, r3
 8000740:	4613      	mov	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	1aca      	subs	r2, r1, r3
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <displayCounter+0x78>)
 800074c:	605a      	str	r2, [r3, #4]
	led_buffer[2]=count2/10;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <displayCounter+0x7c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a0e      	ldr	r2, [pc, #56]	@ (800078c <displayCounter+0x74>)
 8000754:	fb82 1203 	smull	r1, r2, r2, r3
 8000758:	1092      	asrs	r2, r2, #2
 800075a:	17db      	asrs	r3, r3, #31
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a0c      	ldr	r2, [pc, #48]	@ (8000790 <displayCounter+0x78>)
 8000760:	6093      	str	r3, [r2, #8]
	led_buffer[3]=count2%10;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <displayCounter+0x7c>)
 8000764:	6819      	ldr	r1, [r3, #0]
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <displayCounter+0x74>)
 8000768:	fb83 2301 	smull	r2, r3, r3, r1
 800076c:	109a      	asrs	r2, r3, #2
 800076e:	17cb      	asrs	r3, r1, #31
 8000770:	1ad2      	subs	r2, r2, r3
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	1aca      	subs	r2, r1, r3
 800077c:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <displayCounter+0x78>)
 800077e:	60da      	str	r2, [r3, #12]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	200000b8 	.word	0x200000b8
 800078c:	66666667 	.word	0x66666667
 8000790:	20000000 	.word	0x20000000
 8000794:	200000bc 	.word	0x200000bc

08000798 <run_automatic>:

void run_automatic(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_PINK);
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	4887      	ldr	r0, [pc, #540]	@ (80009bc <run_automatic+0x224>)
 80007a0:	f001 fb69 	bl	8001e76 <HAL_GPIO_TogglePin>
	displayCounter();
 80007a4:	f7ff ffb8 	bl	8000718 <displayCounter>
	switch(status1){
 80007a8:	4b85      	ldr	r3, [pc, #532]	@ (80009c0 <run_automatic+0x228>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b0d      	cmp	r3, #13
 80007ae:	d87f      	bhi.n	80008b0 <run_automatic+0x118>
 80007b0:	a201      	add	r2, pc, #4	@ (adr r2, 80007b8 <run_automatic+0x20>)
 80007b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b6:	bf00      	nop
 80007b8:	080007f1 	.word	0x080007f1
 80007bc:	080008b1 	.word	0x080008b1
 80007c0:	080008b1 	.word	0x080008b1
 80007c4:	080008b1 	.word	0x080008b1
 80007c8:	080008b1 	.word	0x080008b1
 80007cc:	080008b1 	.word	0x080008b1
 80007d0:	080008b1 	.word	0x080008b1
 80007d4:	080008b1 	.word	0x080008b1
 80007d8:	080008b1 	.word	0x080008b1
 80007dc:	080008b1 	.word	0x080008b1
 80007e0:	080008b1 	.word	0x080008b1
 80007e4:	08000805 	.word	0x08000805
 80007e8:	08000879 	.word	0x08000879
 80007ec:	08000895 	.word	0x08000895
				case INIT:{
						ResetLight1();
 80007f0:	f000 fb28 	bl	8000e44 <ResetLight1>
						status1 = RED_LED_AUTO;
 80007f4:	4b72      	ldr	r3, [pc, #456]	@ (80009c0 <run_automatic+0x228>)
 80007f6:	220b      	movs	r2, #11
 80007f8:	601a      	str	r2, [r3, #0]
						count1 = time_red;
 80007fa:	4b72      	ldr	r3, [pc, #456]	@ (80009c4 <run_automatic+0x22c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a72      	ldr	r2, [pc, #456]	@ (80009c8 <run_automatic+0x230>)
 8000800:	6013      	str	r3, [r2, #0]
						break;
 8000802:	e05c      	b.n	80008be <run_automatic+0x126>
					}
				case RED_LED_AUTO:{
						RedLight1();
 8000804:	f000 fb4a 	bl	8000e9c <RedLight1>
						if (count1 == 0){
 8000808:	4b6f      	ldr	r3, [pc, #444]	@ (80009c8 <run_automatic+0x230>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d106      	bne.n	800081e <run_automatic+0x86>
							status1 = GREEN_LED_AUTO;
 8000810:	4b6b      	ldr	r3, [pc, #428]	@ (80009c0 <run_automatic+0x228>)
 8000812:	220d      	movs	r2, #13
 8000814:	601a      	str	r2, [r3, #0]
							count1 = time_green;
 8000816:	4b6d      	ldr	r3, [pc, #436]	@ (80009cc <run_automatic+0x234>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a6b      	ldr	r2, [pc, #428]	@ (80009c8 <run_automatic+0x230>)
 800081c:	6013      	str	r3, [r2, #0]
						}
						if (isButtonPressed(modify_button)==1){
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fec6 	bl	80005b0 <isButtonPressed>
 8000824:	4603      	mov	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	d10b      	bne.n	8000842 <run_automatic+0xaa>
							status1 = RED_GREEN_MAN;
 800082a:	4b65      	ldr	r3, [pc, #404]	@ (80009c0 <run_automatic+0x228>)
 800082c:	2215      	movs	r2, #21
 800082e:	601a      	str	r2, [r3, #0]
							status2 = RED_LED_SET;
 8000830:	4b67      	ldr	r3, [pc, #412]	@ (80009d0 <run_automatic+0x238>)
 8000832:	221f      	movs	r2, #31
 8000834:	601a      	str	r2, [r3, #0]
							count1 = 10;
 8000836:	4b64      	ldr	r3, [pc, #400]	@ (80009c8 <run_automatic+0x230>)
 8000838:	220a      	movs	r2, #10
 800083a:	601a      	str	r2, [r3, #0]
							count2 = 1;
 800083c:	4b65      	ldr	r3, [pc, #404]	@ (80009d4 <run_automatic+0x23c>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
						}
						if (isButtonPressed(mode_button)==1){
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff feb4 	bl	80005b0 <isButtonPressed>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	d132      	bne.n	80008b4 <run_automatic+0x11c>
							count3=1;
 800084e:	4b62      	ldr	r3, [pc, #392]	@ (80009d8 <run_automatic+0x240>)
 8000850:	2201      	movs	r2, #1
 8000852:	601a      	str	r2, [r3, #0]
							status1 = RED_LED_SET;
 8000854:	4b5a      	ldr	r3, [pc, #360]	@ (80009c0 <run_automatic+0x228>)
 8000856:	221f      	movs	r2, #31
 8000858:	601a      	str	r2, [r3, #0]
							status2 = RED_LED_SET;
 800085a:	4b5d      	ldr	r3, [pc, #372]	@ (80009d0 <run_automatic+0x238>)
 800085c:	221f      	movs	r2, #31
 800085e:	601a      	str	r2, [r3, #0]
							count1 = 2; //Mode
 8000860:	4b59      	ldr	r3, [pc, #356]	@ (80009c8 <run_automatic+0x230>)
 8000862:	2202      	movs	r2, #2
 8000864:	601a      	str	r2, [r3, #0]
							count2 = time_red; //Value
 8000866:	4b57      	ldr	r3, [pc, #348]	@ (80009c4 <run_automatic+0x22c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a5a      	ldr	r2, [pc, #360]	@ (80009d4 <run_automatic+0x23c>)
 800086c:	6013      	str	r3, [r2, #0]
							ResetLight1();
 800086e:	f000 fae9 	bl	8000e44 <ResetLight1>
							ResetLight2();
 8000872:	f000 fafd 	bl	8000e70 <ResetLight2>
						}
						break;
 8000876:	e01d      	b.n	80008b4 <run_automatic+0x11c>
					}
				case YELLOW_LED_AUTO:{
						YellowLight1();
 8000878:	f000 fb26 	bl	8000ec8 <YellowLight1>
						if (count1==0){
 800087c:	4b52      	ldr	r3, [pc, #328]	@ (80009c8 <run_automatic+0x230>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d119      	bne.n	80008b8 <run_automatic+0x120>
							status1 = RED_LED_AUTO;
 8000884:	4b4e      	ldr	r3, [pc, #312]	@ (80009c0 <run_automatic+0x228>)
 8000886:	220b      	movs	r2, #11
 8000888:	601a      	str	r2, [r3, #0]
							count1 = time_red;
 800088a:	4b4e      	ldr	r3, [pc, #312]	@ (80009c4 <run_automatic+0x22c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a4e      	ldr	r2, [pc, #312]	@ (80009c8 <run_automatic+0x230>)
 8000890:	6013      	str	r3, [r2, #0]
						}
						break;
 8000892:	e011      	b.n	80008b8 <run_automatic+0x120>
					}
				case GREEN_LED_AUTO:{
						GreenLight1();
 8000894:	f000 fb2e 	bl	8000ef4 <GreenLight1>
						if (count1==0)	{
 8000898:	4b4b      	ldr	r3, [pc, #300]	@ (80009c8 <run_automatic+0x230>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d10d      	bne.n	80008bc <run_automatic+0x124>
							status1 = YELLOW_LED_AUTO;
 80008a0:	4b47      	ldr	r3, [pc, #284]	@ (80009c0 <run_automatic+0x228>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
							count1 = time_yellow;
 80008a6:	4b4d      	ldr	r3, [pc, #308]	@ (80009dc <run_automatic+0x244>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a47      	ldr	r2, [pc, #284]	@ (80009c8 <run_automatic+0x230>)
 80008ac:	6013      	str	r3, [r2, #0]
						}
						break;
 80008ae:	e005      	b.n	80008bc <run_automatic+0x124>
					}
				default:
						break;
 80008b0:	bf00      	nop
 80008b2:	e004      	b.n	80008be <run_automatic+0x126>
						break;
 80008b4:	bf00      	nop
 80008b6:	e002      	b.n	80008be <run_automatic+0x126>
						break;
 80008b8:	bf00      	nop
 80008ba:	e000      	b.n	80008be <run_automatic+0x126>
						break;
 80008bc:	bf00      	nop
			}

		switch(status2){
 80008be:	4b44      	ldr	r3, [pc, #272]	@ (80009d0 <run_automatic+0x238>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b0d      	cmp	r3, #13
 80008c4:	d852      	bhi.n	800096c <run_automatic+0x1d4>
 80008c6:	a201      	add	r2, pc, #4	@ (adr r2, 80008cc <run_automatic+0x134>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	08000905 	.word	0x08000905
 80008d0:	0800096d 	.word	0x0800096d
 80008d4:	0800096d 	.word	0x0800096d
 80008d8:	0800096d 	.word	0x0800096d
 80008dc:	0800096d 	.word	0x0800096d
 80008e0:	0800096d 	.word	0x0800096d
 80008e4:	0800096d 	.word	0x0800096d
 80008e8:	0800096d 	.word	0x0800096d
 80008ec:	0800096d 	.word	0x0800096d
 80008f0:	0800096d 	.word	0x0800096d
 80008f4:	0800096d 	.word	0x0800096d
 80008f8:	08000919 	.word	0x08000919
 80008fc:	08000935 	.word	0x08000935
 8000900:	08000951 	.word	0x08000951
					case INIT:{
							ResetLight2();
 8000904:	f000 fab4 	bl	8000e70 <ResetLight2>
							status2 = GREEN_LED_AUTO;
 8000908:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <run_automatic+0x238>)
 800090a:	220d      	movs	r2, #13
 800090c:	601a      	str	r2, [r3, #0]
							count2 = time_green;
 800090e:	4b2f      	ldr	r3, [pc, #188]	@ (80009cc <run_automatic+0x234>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a30      	ldr	r2, [pc, #192]	@ (80009d4 <run_automatic+0x23c>)
 8000914:	6013      	str	r3, [r2, #0]
							break;
 8000916:	e030      	b.n	800097a <run_automatic+0x1e2>
						}
					case RED_LED_AUTO:{
							RedLight2();
 8000918:	f000 fb02 	bl	8000f20 <RedLight2>
							if (count2==0){
 800091c:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <run_automatic+0x23c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d125      	bne.n	8000970 <run_automatic+0x1d8>
								status2 = GREEN_LED_AUTO;
 8000924:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <run_automatic+0x238>)
 8000926:	220d      	movs	r2, #13
 8000928:	601a      	str	r2, [r3, #0]
								count2 = time_green;
 800092a:	4b28      	ldr	r3, [pc, #160]	@ (80009cc <run_automatic+0x234>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a29      	ldr	r2, [pc, #164]	@ (80009d4 <run_automatic+0x23c>)
 8000930:	6013      	str	r3, [r2, #0]
							}
							break;
 8000932:	e01d      	b.n	8000970 <run_automatic+0x1d8>
						}
					case YELLOW_LED_AUTO:{
							YellowLight2();
 8000934:	f000 fb0a 	bl	8000f4c <YellowLight2>
							if (count2==0){
 8000938:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <run_automatic+0x23c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d119      	bne.n	8000974 <run_automatic+0x1dc>
								status2 = RED_LED_AUTO;
 8000940:	4b23      	ldr	r3, [pc, #140]	@ (80009d0 <run_automatic+0x238>)
 8000942:	220b      	movs	r2, #11
 8000944:	601a      	str	r2, [r3, #0]
								count2 = time_red;
 8000946:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <run_automatic+0x22c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a22      	ldr	r2, [pc, #136]	@ (80009d4 <run_automatic+0x23c>)
 800094c:	6013      	str	r3, [r2, #0]
							}
							break;
 800094e:	e011      	b.n	8000974 <run_automatic+0x1dc>
						}
					case GREEN_LED_AUTO:{
							GreenLight2();
 8000950:	f000 fb12 	bl	8000f78 <GreenLight2>
							if (count2 == 0)	{
 8000954:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <run_automatic+0x23c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d10d      	bne.n	8000978 <run_automatic+0x1e0>
								status2 = YELLOW_LED_AUTO;
 800095c:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <run_automatic+0x238>)
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
								count2 = time_yellow;
 8000962:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <run_automatic+0x244>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a1b      	ldr	r2, [pc, #108]	@ (80009d4 <run_automatic+0x23c>)
 8000968:	6013      	str	r3, [r2, #0]
							}
							break;
 800096a:	e005      	b.n	8000978 <run_automatic+0x1e0>
						}
					default:
							break;
 800096c:	bf00      	nop
 800096e:	e004      	b.n	800097a <run_automatic+0x1e2>
							break;
 8000970:	bf00      	nop
 8000972:	e002      	b.n	800097a <run_automatic+0x1e2>
							break;
 8000974:	bf00      	nop
 8000976:	e000      	b.n	800097a <run_automatic+0x1e2>
							break;
 8000978:	bf00      	nop
				}
		if((status1/30)!=1)count1--;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <run_automatic+0x228>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	3b1e      	subs	r3, #30
 8000980:	2b1d      	cmp	r3, #29
 8000982:	d904      	bls.n	800098e <run_automatic+0x1f6>
 8000984:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <run_automatic+0x230>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3b01      	subs	r3, #1
 800098a:	4a0f      	ldr	r2, [pc, #60]	@ (80009c8 <run_automatic+0x230>)
 800098c:	6013      	str	r3, [r2, #0]
		if((status2/30)!=1)count2--;
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <run_automatic+0x238>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3b1e      	subs	r3, #30
 8000994:	2b1d      	cmp	r3, #29
 8000996:	d904      	bls.n	80009a2 <run_automatic+0x20a>
 8000998:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <run_automatic+0x23c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3b01      	subs	r3, #1
 800099e:	4a0d      	ldr	r2, [pc, #52]	@ (80009d4 <run_automatic+0x23c>)
 80009a0:	6013      	str	r3, [r2, #0]
		if((status1/30)==1)count3--;
 80009a2:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <run_automatic+0x228>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3b1e      	subs	r3, #30
 80009a8:	2b1d      	cmp	r3, #29
 80009aa:	d804      	bhi.n	80009b6 <run_automatic+0x21e>
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <run_automatic+0x240>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <run_automatic+0x240>)
 80009b4:	6013      	str	r3, [r2, #0]
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40010800 	.word	0x40010800
 80009c0:	200000b0 	.word	0x200000b0
 80009c4:	20000064 	.word	0x20000064
 80009c8:	200000b8 	.word	0x200000b8
 80009cc:	2000006c 	.word	0x2000006c
 80009d0:	200000b4 	.word	0x200000b4
 80009d4:	200000bc 	.word	0x200000bc
 80009d8:	200000c0 	.word	0x200000c0
 80009dc:	20000068 	.word	0x20000068

080009e0 <run_manual>:
#include "fsm_manual.h"

void run_manual(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	switch (status1){
 80009e4:	4b5a      	ldr	r3, [pc, #360]	@ (8000b50 <run_manual+0x170>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3b15      	subs	r3, #21
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	f200 80a4 	bhi.w	8000b38 <run_manual+0x158>
 80009f0:	a201      	add	r2, pc, #4	@ (adr r2, 80009f8 <run_manual+0x18>)
 80009f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000a09 	.word	0x08000a09
 80009fc:	08000a55 	.word	0x08000a55
 8000a00:	08000aa1 	.word	0x08000aa1
 8000a04:	08000aed 	.word	0x08000aed
	case RED_GREEN_MAN:{
		RedLight1();
 8000a08:	f000 fa48 	bl	8000e9c <RedLight1>
		GreenLight2();
 8000a0c:	f000 fab4 	bl	8000f78 <GreenLight2>
		if(count1==0){
 8000a10:	4b50      	ldr	r3, [pc, #320]	@ (8000b54 <run_manual+0x174>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10d      	bne.n	8000a34 <run_manual+0x54>
			count1 = time_red;
 8000a18:	4b4f      	ldr	r3, [pc, #316]	@ (8000b58 <run_manual+0x178>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a4d      	ldr	r2, [pc, #308]	@ (8000b54 <run_manual+0x174>)
 8000a1e:	6013      	str	r3, [r2, #0]
			count2 = time_green;
 8000a20:	4b4e      	ldr	r3, [pc, #312]	@ (8000b5c <run_manual+0x17c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a4e      	ldr	r2, [pc, #312]	@ (8000b60 <run_manual+0x180>)
 8000a26:	6013      	str	r3, [r2, #0]
			status1 = RED_LED_AUTO;
 8000a28:	4b49      	ldr	r3, [pc, #292]	@ (8000b50 <run_manual+0x170>)
 8000a2a:	220b      	movs	r2, #11
 8000a2c:	601a      	str	r2, [r3, #0]
			status2 = GREEN_LED_AUTO;
 8000a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8000b64 <run_manual+0x184>)
 8000a30:	220d      	movs	r2, #13
 8000a32:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0)==1){
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fdbb 	bl	80005b0 <isButtonPressed>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d17d      	bne.n	8000b3c <run_manual+0x15c>
			status1= RED_YELLOW_MAN;
 8000a40:	4b43      	ldr	r3, [pc, #268]	@ (8000b50 <run_manual+0x170>)
 8000a42:	2216      	movs	r2, #22
 8000a44:	601a      	str	r2, [r3, #0]
			count1 = 10;
 8000a46:	4b43      	ldr	r3, [pc, #268]	@ (8000b54 <run_manual+0x174>)
 8000a48:	220a      	movs	r2, #10
 8000a4a:	601a      	str	r2, [r3, #0]
			count2 = 1;
 8000a4c:	4b44      	ldr	r3, [pc, #272]	@ (8000b60 <run_manual+0x180>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a52:	e073      	b.n	8000b3c <run_manual+0x15c>
	}
	case RED_YELLOW_MAN:{
		RedLight1();
 8000a54:	f000 fa22 	bl	8000e9c <RedLight1>
		YellowLight2();
 8000a58:	f000 fa78 	bl	8000f4c <YellowLight2>
		if(count1==0){
 8000a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b54 <run_manual+0x174>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d10d      	bne.n	8000a80 <run_manual+0xa0>
			count1 = time_red;
 8000a64:	4b3c      	ldr	r3, [pc, #240]	@ (8000b58 <run_manual+0x178>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a3a      	ldr	r2, [pc, #232]	@ (8000b54 <run_manual+0x174>)
 8000a6a:	6013      	str	r3, [r2, #0]
			count2 = time_yellow;
 8000a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b68 <run_manual+0x188>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a3b      	ldr	r2, [pc, #236]	@ (8000b60 <run_manual+0x180>)
 8000a72:	6013      	str	r3, [r2, #0]
			status1 = RED_LED_AUTO;
 8000a74:	4b36      	ldr	r3, [pc, #216]	@ (8000b50 <run_manual+0x170>)
 8000a76:	220b      	movs	r2, #11
 8000a78:	601a      	str	r2, [r3, #0]
			status2 = YELLOW_LED_AUTO;
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b64 <run_manual+0x184>)
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0)==1){
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff fd95 	bl	80005b0 <isButtonPressed>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d159      	bne.n	8000b40 <run_manual+0x160>
			status1= GREEN_RED_MAN;
 8000a8c:	4b30      	ldr	r3, [pc, #192]	@ (8000b50 <run_manual+0x170>)
 8000a8e:	2217      	movs	r2, #23
 8000a90:	601a      	str	r2, [r3, #0]
			count1 = 10;
 8000a92:	4b30      	ldr	r3, [pc, #192]	@ (8000b54 <run_manual+0x174>)
 8000a94:	220a      	movs	r2, #10
 8000a96:	601a      	str	r2, [r3, #0]
			count2 = 1;
 8000a98:	4b31      	ldr	r3, [pc, #196]	@ (8000b60 <run_manual+0x180>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a9e:	e04f      	b.n	8000b40 <run_manual+0x160>
	}
	case GREEN_RED_MAN:{
		GreenLight1();
 8000aa0:	f000 fa28 	bl	8000ef4 <GreenLight1>
		RedLight2();
 8000aa4:	f000 fa3c 	bl	8000f20 <RedLight2>
		if(count1==0){
 8000aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <run_manual+0x174>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d10d      	bne.n	8000acc <run_manual+0xec>
			count1 = time_green;
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b5c <run_manual+0x17c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a27      	ldr	r2, [pc, #156]	@ (8000b54 <run_manual+0x174>)
 8000ab6:	6013      	str	r3, [r2, #0]
			count2 = time_red;
 8000ab8:	4b27      	ldr	r3, [pc, #156]	@ (8000b58 <run_manual+0x178>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a28      	ldr	r2, [pc, #160]	@ (8000b60 <run_manual+0x180>)
 8000abe:	6013      	str	r3, [r2, #0]
			status1 = GREEN_LED_AUTO;
 8000ac0:	4b23      	ldr	r3, [pc, #140]	@ (8000b50 <run_manual+0x170>)
 8000ac2:	220d      	movs	r2, #13
 8000ac4:	601a      	str	r2, [r3, #0]
			status2 = RED_LED_AUTO;
 8000ac6:	4b27      	ldr	r3, [pc, #156]	@ (8000b64 <run_manual+0x184>)
 8000ac8:	220b      	movs	r2, #11
 8000aca:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0)==1){
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fd6f 	bl	80005b0 <isButtonPressed>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d135      	bne.n	8000b44 <run_manual+0x164>
			status1= YELLOW_RED_MAN;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <run_manual+0x170>)
 8000ada:	2218      	movs	r2, #24
 8000adc:	601a      	str	r2, [r3, #0]
			count1 = 10;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <run_manual+0x174>)
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	601a      	str	r2, [r3, #0]
			count2 = 1;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <run_manual+0x180>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	601a      	str	r2, [r3, #0]
		}
		break;
 8000aea:	e02b      	b.n	8000b44 <run_manual+0x164>
	}
	case YELLOW_RED_MAN:{
			YellowLight1();
 8000aec:	f000 f9ec 	bl	8000ec8 <YellowLight1>
			RedLight2();
 8000af0:	f000 fa16 	bl	8000f20 <RedLight2>
			if(count1==0){
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <run_manual+0x174>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d10d      	bne.n	8000b18 <run_manual+0x138>
				count1 = time_yellow;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <run_manual+0x188>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <run_manual+0x174>)
 8000b02:	6013      	str	r3, [r2, #0]
				count2 = time_red;
 8000b04:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <run_manual+0x178>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a15      	ldr	r2, [pc, #84]	@ (8000b60 <run_manual+0x180>)
 8000b0a:	6013      	str	r3, [r2, #0]
				status1 = YELLOW_LED_AUTO;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <run_manual+0x170>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	601a      	str	r2, [r3, #0]
				status2 = RED_LED_AUTO;
 8000b12:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <run_manual+0x184>)
 8000b14:	220b      	movs	r2, #11
 8000b16:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0)==1){
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff fd49 	bl	80005b0 <isButtonPressed>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d111      	bne.n	8000b48 <run_manual+0x168>
				status1= RED_GREEN_MAN;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <run_manual+0x170>)
 8000b26:	2215      	movs	r2, #21
 8000b28:	601a      	str	r2, [r3, #0]
				count1 = 10;
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <run_manual+0x174>)
 8000b2c:	220a      	movs	r2, #10
 8000b2e:	601a      	str	r2, [r3, #0]
				count2 = 1;
 8000b30:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <run_manual+0x180>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b36:	e007      	b.n	8000b48 <run_manual+0x168>

	}
	default:
		break;
 8000b38:	bf00      	nop
 8000b3a:	e006      	b.n	8000b4a <run_manual+0x16a>
		break;
 8000b3c:	bf00      	nop
 8000b3e:	e004      	b.n	8000b4a <run_manual+0x16a>
		break;
 8000b40:	bf00      	nop
 8000b42:	e002      	b.n	8000b4a <run_manual+0x16a>
		break;
 8000b44:	bf00      	nop
 8000b46:	e000      	b.n	8000b4a <run_manual+0x16a>
			break;
 8000b48:	bf00      	nop
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000b0 	.word	0x200000b0
 8000b54:	200000b8 	.word	0x200000b8
 8000b58:	20000064 	.word	0x20000064
 8000b5c:	2000006c 	.word	0x2000006c
 8000b60:	200000bc 	.word	0x200000bc
 8000b64:	200000b4 	.word	0x200000b4
 8000b68:	20000068 	.word	0x20000068

08000b6c <run_setting>:

int tmp_red=0;
int tmp_yellow=0;
int tmp_green=0;

void run_setting(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	switch (status1){
 8000b70:	4b73      	ldr	r3, [pc, #460]	@ (8000d40 <run_setting+0x1d4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b21      	cmp	r3, #33	@ 0x21
 8000b76:	f000 8089 	beq.w	8000c8c <run_setting+0x120>
 8000b7a:	2b21      	cmp	r3, #33	@ 0x21
 8000b7c:	f300 80de 	bgt.w	8000d3c <run_setting+0x1d0>
 8000b80:	2b1f      	cmp	r3, #31
 8000b82:	d002      	beq.n	8000b8a <run_setting+0x1e>
 8000b84:	2b20      	cmp	r3, #32
 8000b86:	d041      	beq.n	8000c0c <run_setting+0xa0>
			tmp_green = count2;
		}
		break;
	}
	}
}
 8000b88:	e0d8      	b.n	8000d3c <run_setting+0x1d0>
		if(count3==0){
 8000b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d44 <run_setting+0x1d8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10a      	bne.n	8000ba8 <run_setting+0x3c>
			count3=1;
 8000b92:	4b6c      	ldr	r3, [pc, #432]	@ (8000d44 <run_setting+0x1d8>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_RED_1);
 8000b98:	2102      	movs	r1, #2
 8000b9a:	486b      	ldr	r0, [pc, #428]	@ (8000d48 <run_setting+0x1dc>)
 8000b9c:	f001 f96b 	bl	8001e76 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_RED_2);
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	4869      	ldr	r0, [pc, #420]	@ (8000d48 <run_setting+0x1dc>)
 8000ba4:	f001 f967 	bl	8001e76 <HAL_GPIO_TogglePin>
		if(isButtonPressed(mode_button)==1){
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff fd01 	bl	80005b0 <isButtonPressed>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d10d      	bne.n	8000bd0 <run_setting+0x64>
			status1 = YELLOW_LED_SET;
 8000bb4:	4b62      	ldr	r3, [pc, #392]	@ (8000d40 <run_setting+0x1d4>)
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	601a      	str	r2, [r3, #0]
			count1 = 3;
 8000bba:	4b64      	ldr	r3, [pc, #400]	@ (8000d4c <run_setting+0x1e0>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	601a      	str	r2, [r3, #0]
			count2 = time_yellow;
 8000bc0:	4b63      	ldr	r3, [pc, #396]	@ (8000d50 <run_setting+0x1e4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a63      	ldr	r2, [pc, #396]	@ (8000d54 <run_setting+0x1e8>)
 8000bc6:	6013      	str	r3, [r2, #0]
			ResetLight1();
 8000bc8:	f000 f93c 	bl	8000e44 <ResetLight1>
			ResetLight2();
 8000bcc:	f000 f950 	bl	8000e70 <ResetLight2>
		if(isButtonPressed(modify_button)==1){
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff fced 	bl	80005b0 <isButtonPressed>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d10b      	bne.n	8000bf4 <run_setting+0x88>
			count2++;
 8000bdc:	4b5d      	ldr	r3, [pc, #372]	@ (8000d54 <run_setting+0x1e8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	4a5c      	ldr	r2, [pc, #368]	@ (8000d54 <run_setting+0x1e8>)
 8000be4:	6013      	str	r3, [r2, #0]
			if(count2 > 99)count2 =1;
 8000be6:	4b5b      	ldr	r3, [pc, #364]	@ (8000d54 <run_setting+0x1e8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b63      	cmp	r3, #99	@ 0x63
 8000bec:	dd02      	ble.n	8000bf4 <run_setting+0x88>
 8000bee:	4b59      	ldr	r3, [pc, #356]	@ (8000d54 <run_setting+0x1e8>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(choose_button)==1){
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f7ff fcdb 	bl	80005b0 <isButtonPressed>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	f040 8098 	bne.w	8000d32 <run_setting+0x1c6>
			tmp_red = count2;
 8000c02:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <run_setting+0x1e8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a54      	ldr	r2, [pc, #336]	@ (8000d58 <run_setting+0x1ec>)
 8000c08:	6013      	str	r3, [r2, #0]
		break;
 8000c0a:	e092      	b.n	8000d32 <run_setting+0x1c6>
		if(count3==0){
 8000c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d44 <run_setting+0x1d8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10a      	bne.n	8000c2a <run_setting+0xbe>
			count3=1;
 8000c14:	4b4b      	ldr	r3, [pc, #300]	@ (8000d44 <run_setting+0x1d8>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_1);
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	484a      	ldr	r0, [pc, #296]	@ (8000d48 <run_setting+0x1dc>)
 8000c1e:	f001 f92a 	bl	8001e76 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_2);
 8000c22:	2120      	movs	r1, #32
 8000c24:	4848      	ldr	r0, [pc, #288]	@ (8000d48 <run_setting+0x1dc>)
 8000c26:	f001 f926 	bl	8001e76 <HAL_GPIO_TogglePin>
		if(isButtonPressed(mode_button)==1){
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f7ff fcc0 	bl	80005b0 <isButtonPressed>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d10d      	bne.n	8000c52 <run_setting+0xe6>
			status1 = GREEN_LED_SET;
 8000c36:	4b42      	ldr	r3, [pc, #264]	@ (8000d40 <run_setting+0x1d4>)
 8000c38:	2221      	movs	r2, #33	@ 0x21
 8000c3a:	601a      	str	r2, [r3, #0]
			count1 = 4;
 8000c3c:	4b43      	ldr	r3, [pc, #268]	@ (8000d4c <run_setting+0x1e0>)
 8000c3e:	2204      	movs	r2, #4
 8000c40:	601a      	str	r2, [r3, #0]
			count2 = time_green;
 8000c42:	4b46      	ldr	r3, [pc, #280]	@ (8000d5c <run_setting+0x1f0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a43      	ldr	r2, [pc, #268]	@ (8000d54 <run_setting+0x1e8>)
 8000c48:	6013      	str	r3, [r2, #0]
			ResetLight1();
 8000c4a:	f000 f8fb 	bl	8000e44 <ResetLight1>
			ResetLight2();
 8000c4e:	f000 f90f 	bl	8000e70 <ResetLight2>
		if(isButtonPressed(modify_button)==1){
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff fcac 	bl	80005b0 <isButtonPressed>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d10b      	bne.n	8000c76 <run_setting+0x10a>
			count2++;
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d54 <run_setting+0x1e8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	3301      	adds	r3, #1
 8000c64:	4a3b      	ldr	r2, [pc, #236]	@ (8000d54 <run_setting+0x1e8>)
 8000c66:	6013      	str	r3, [r2, #0]
			if(count2 > 99)count2 =1;
 8000c68:	4b3a      	ldr	r3, [pc, #232]	@ (8000d54 <run_setting+0x1e8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b63      	cmp	r3, #99	@ 0x63
 8000c6e:	dd02      	ble.n	8000c76 <run_setting+0x10a>
 8000c70:	4b38      	ldr	r3, [pc, #224]	@ (8000d54 <run_setting+0x1e8>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(choose_button)==1){
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff fc9a 	bl	80005b0 <isButtonPressed>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d159      	bne.n	8000d36 <run_setting+0x1ca>
			tmp_yellow = count2;
 8000c82:	4b34      	ldr	r3, [pc, #208]	@ (8000d54 <run_setting+0x1e8>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a36      	ldr	r2, [pc, #216]	@ (8000d60 <run_setting+0x1f4>)
 8000c88:	6013      	str	r3, [r2, #0]
		break;
 8000c8a:	e054      	b.n	8000d36 <run_setting+0x1ca>
		if(count3==0){
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d44 <run_setting+0x1d8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10a      	bne.n	8000caa <run_setting+0x13e>
			count3=1;
 8000c94:	4b2b      	ldr	r3, [pc, #172]	@ (8000d44 <run_setting+0x1d8>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_1);
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	482a      	ldr	r0, [pc, #168]	@ (8000d48 <run_setting+0x1dc>)
 8000c9e:	f001 f8ea 	bl	8001e76 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_2);
 8000ca2:	2140      	movs	r1, #64	@ 0x40
 8000ca4:	4828      	ldr	r0, [pc, #160]	@ (8000d48 <run_setting+0x1dc>)
 8000ca6:	f001 f8e6 	bl	8001e76 <HAL_GPIO_TogglePin>
		if(isButtonPressed(mode_button)==1){
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fc80 	bl	80005b0 <isButtonPressed>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d120      	bne.n	8000cf8 <run_setting+0x18c>
			if(tmp_red == tmp_green + tmp_yellow){
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d64 <run_setting+0x1f8>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b29      	ldr	r3, [pc, #164]	@ (8000d60 <run_setting+0x1f4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	441a      	add	r2, r3
 8000cc0:	4b25      	ldr	r3, [pc, #148]	@ (8000d58 <run_setting+0x1ec>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d10b      	bne.n	8000ce0 <run_setting+0x174>
				time_red=tmp_red;
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <run_setting+0x1ec>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a26      	ldr	r2, [pc, #152]	@ (8000d68 <run_setting+0x1fc>)
 8000cce:	6013      	str	r3, [r2, #0]
				time_yellow=tmp_yellow;
 8000cd0:	4b23      	ldr	r3, [pc, #140]	@ (8000d60 <run_setting+0x1f4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a1e      	ldr	r2, [pc, #120]	@ (8000d50 <run_setting+0x1e4>)
 8000cd6:	6013      	str	r3, [r2, #0]
				time_green=tmp_green;
 8000cd8:	4b22      	ldr	r3, [pc, #136]	@ (8000d64 <run_setting+0x1f8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8000d5c <run_setting+0x1f0>)
 8000cde:	6013      	str	r3, [r2, #0]
			status1 = INIT;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <run_setting+0x1d4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
			status2 = INIT;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <run_setting+0x200>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
			count1 = 0;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <run_setting+0x1e0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
			count2 = 0;
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <run_setting+0x1e8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(modify_button)==1 ){
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff fc59 	bl	80005b0 <isButtonPressed>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d10b      	bne.n	8000d1c <run_setting+0x1b0>
			count2++;
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <run_setting+0x1e8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a12      	ldr	r2, [pc, #72]	@ (8000d54 <run_setting+0x1e8>)
 8000d0c:	6013      	str	r3, [r2, #0]
			if(count2 > 99)count2 =1;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <run_setting+0x1e8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b63      	cmp	r3, #99	@ 0x63
 8000d14:	dd02      	ble.n	8000d1c <run_setting+0x1b0>
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <run_setting+0x1e8>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(choose_button)==1){
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f7ff fc47 	bl	80005b0 <isButtonPressed>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d108      	bne.n	8000d3a <run_setting+0x1ce>
			tmp_green = count2;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <run_setting+0x1e8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <run_setting+0x1f8>)
 8000d2e:	6013      	str	r3, [r2, #0]
		break;
 8000d30:	e003      	b.n	8000d3a <run_setting+0x1ce>
		break;
 8000d32:	bf00      	nop
 8000d34:	e002      	b.n	8000d3c <run_setting+0x1d0>
		break;
 8000d36:	bf00      	nop
 8000d38:	e000      	b.n	8000d3c <run_setting+0x1d0>
		break;
 8000d3a:	bf00      	nop
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200000b0 	.word	0x200000b0
 8000d44:	200000c0 	.word	0x200000c0
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	200000b8 	.word	0x200000b8
 8000d50:	20000068 	.word	0x20000068
 8000d54:	200000bc 	.word	0x200000bc
 8000d58:	200000c4 	.word	0x200000c4
 8000d5c:	2000006c 	.word	0x2000006c
 8000d60:	200000c8 	.word	0x200000c8
 8000d64:	200000cc 	.word	0x200000cc
 8000d68:	20000064 	.word	0x20000064
 8000d6c:	200000b4 	.word	0x200000b4

08000d70 <GPIO_Init>:
#include "global.h"

void GPIO_Init(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]

    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    // Enable GPIO Ports Clock
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	4b2c      	ldr	r3, [pc, #176]	@ (8000e38 <GPIO_Init+0xc8>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a2b      	ldr	r2, [pc, #172]	@ (8000e38 <GPIO_Init+0xc8>)
 8000d8a:	f043 0308 	orr.w	r3, r3, #8
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b29      	ldr	r3, [pc, #164]	@ (8000e38 <GPIO_Init+0xc8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b26      	ldr	r3, [pc, #152]	@ (8000e38 <GPIO_Init+0xc8>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a25      	ldr	r2, [pc, #148]	@ (8000e38 <GPIO_Init+0xc8>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b23      	ldr	r3, [pc, #140]	@ (8000e38 <GPIO_Init+0xc8>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]

    // Configure GPIO pin Output Level for PB0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2101      	movs	r1, #1
 8000db8:	4820      	ldr	r0, [pc, #128]	@ (8000e3c <GPIO_Init+0xcc>)
 8000dba:	f001 f844 	bl	8001e46 <HAL_GPIO_WritePin>

    // Configure GPIO pins : PB0 as output
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4819      	ldr	r0, [pc, #100]	@ (8000e3c <GPIO_Init+0xcc>)
 8000dd6:	f000 fea3 	bl	8001b20 <HAL_GPIO_Init>

    // Configure GPIO pins : PA13, PA14, PA15 as input with pull-up
    GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000dda:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000dde:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	4619      	mov	r1, r3
 8000dee:	4814      	ldr	r0, [pc, #80]	@ (8000e40 <GPIO_Init+0xd0>)
 8000df0:	f000 fe96 	bl	8001b20 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    // Configure GPIO pins : PA1 PA2 PA3 PA4 PA5 PA6 PA7 as output
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |
 8000df4:	23fe      	movs	r3, #254	@ 0xfe
 8000df6:	60bb      	str	r3, [r7, #8]
                          GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2302      	movs	r3, #2
 8000e02:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <GPIO_Init+0xd0>)
 8000e0c:	f000 fe88 	bl	8001b20 <HAL_GPIO_Init>

    // Configure GPIO pins : PB1 PB2 PB3 PB4 PB5 PB6 PB7 PB8 PB9 PB10 PB11 PB12 PB13 as output
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |
 8000e10:	f643 73fe 	movw	r3, #16382	@ 0x3ffe
 8000e14:	60bb      	str	r3, [r7, #8]
                          GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |
                          GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |
                          GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	4619      	mov	r1, r3
 8000e28:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <GPIO_Init+0xcc>)
 8000e2a:	f000 fe79 	bl	8001b20 <HAL_GPIO_Init>

}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010c00 	.word	0x40010c00
 8000e40:	40010800 	.word	0x40010800

08000e44 <ResetLight1>:

void ResetLight1(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	4807      	ldr	r0, [pc, #28]	@ (8000e6c <ResetLight1+0x28>)
 8000e4e:	f000 fffa 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2104      	movs	r1, #4
 8000e56:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <ResetLight1+0x28>)
 8000e58:	f000 fff5 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2108      	movs	r1, #8
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <ResetLight1+0x28>)
 8000e62:	f000 fff0 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40010800 	.word	0x40010800

08000e70 <ResetLight2>:

void ResetLight2(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2110      	movs	r1, #16
 8000e78:	4807      	ldr	r0, [pc, #28]	@ (8000e98 <ResetLight2+0x28>)
 8000e7a:	f000 ffe4 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 ,  RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2120      	movs	r1, #32
 8000e82:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <ResetLight2+0x28>)
 8000e84:	f000 ffdf 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2140      	movs	r1, #64	@ 0x40
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <ResetLight2+0x28>)
 8000e8e:	f000 ffda 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010800 	.word	0x40010800

08000e9c <RedLight1>:
void RedLight1(){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4807      	ldr	r0, [pc, #28]	@ (8000ec4 <RedLight1+0x28>)
 8000ea6:	f000 ffce 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2104      	movs	r1, #4
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <RedLight1+0x28>)
 8000eb0:	f000 ffc9 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <RedLight1+0x28>)
 8000eba:	f000 ffc4 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40010800 	.word	0x40010800

08000ec8 <YellowLight1>:
void YellowLight1(){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4807      	ldr	r0, [pc, #28]	@ (8000ef0 <YellowLight1+0x28>)
 8000ed2:	f000 ffb8 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2104      	movs	r1, #4
 8000eda:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <YellowLight1+0x28>)
 8000edc:	f000 ffb3 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <YellowLight1+0x28>)
 8000ee6:	f000 ffae 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <GreenLight1>:
void GreenLight1(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2102      	movs	r1, #2
 8000efc:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <GreenLight1+0x28>)
 8000efe:	f000 ffa2 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2104      	movs	r1, #4
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <GreenLight1+0x28>)
 8000f08:	f000 ff9d 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2108      	movs	r1, #8
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <GreenLight1+0x28>)
 8000f12:	f000 ff98 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40010800 	.word	0x40010800

08000f20 <RedLight2>:
void RedLight2(){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2110      	movs	r1, #16
 8000f28:	4807      	ldr	r0, [pc, #28]	@ (8000f48 <RedLight2+0x28>)
 8000f2a:	f000 ff8c 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 , RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2120      	movs	r1, #32
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <RedLight2+0x28>)
 8000f34:	f000 ff87 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2140      	movs	r1, #64	@ 0x40
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <RedLight2+0x28>)
 8000f3e:	f000 ff82 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40010800 	.word	0x40010800

08000f4c <YellowLight2>:
void YellowLight2(){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2110      	movs	r1, #16
 8000f54:	4807      	ldr	r0, [pc, #28]	@ (8000f74 <YellowLight2+0x28>)
 8000f56:	f000 ff76 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 , SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <YellowLight2+0x28>)
 8000f60:	f000 ff71 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2140      	movs	r1, #64	@ 0x40
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <YellowLight2+0x28>)
 8000f6a:	f000 ff6c 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40010800 	.word	0x40010800

08000f78 <GreenLight2>:
void GreenLight2(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2110      	movs	r1, #16
 8000f80:	4807      	ldr	r0, [pc, #28]	@ (8000fa0 <GreenLight2+0x28>)
 8000f82:	f000 ff60 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 , RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2120      	movs	r1, #32
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <GreenLight2+0x28>)
 8000f8c:	f000 ff5b 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2140      	movs	r1, #64	@ 0x40
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <GreenLight2+0x28>)
 8000f96:	f000 ff56 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40010800 	.word	0x40010800

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f000 fc4a 	bl	8001840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fac:	f000 f83a 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f000 f8c2 	bl	8001138 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fb4:	f000 f874 	bl	80010a0 <MX_TIM2_Init>
  MX_IWDG_Init();
 8000fb8:	f000 fb66 	bl	8001688 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000fbc:	4813      	ldr	r0, [pc, #76]	@ (800100c <main+0x68>)
 8000fbe:	f001 fbf5 	bl	80027ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Init();
 8000fc2:	f000 f8e9 	bl	8001198 <SCH_Init>

  SCH_Add_Task(getKeyInput, 500 , 10);
 8000fc6:	220a      	movs	r2, #10
 8000fc8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000fcc:	4810      	ldr	r0, [pc, #64]	@ (8001010 <main+0x6c>)
 8000fce:	f000 f91f 	bl	8001210 <SCH_Add_Task>
  SCH_Add_Task(run_automatic, 1000, 1000);
 8000fd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fd6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fda:	480e      	ldr	r0, [pc, #56]	@ (8001014 <main+0x70>)
 8000fdc:	f000 f918 	bl	8001210 <SCH_Add_Task>
  SCH_Add_Task(run_manual, 1000, 100);
 8000fe0:	2264      	movs	r2, #100	@ 0x64
 8000fe2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fe6:	480c      	ldr	r0, [pc, #48]	@ (8001018 <main+0x74>)
 8000fe8:	f000 f912 	bl	8001210 <SCH_Add_Task>
  SCH_Add_Task(run_setting, 1000, 100);
 8000fec:	2264      	movs	r2, #100	@ 0x64
 8000fee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ff2:	480a      	ldr	r0, [pc, #40]	@ (800101c <main+0x78>)
 8000ff4:	f000 f90c 	bl	8001210 <SCH_Add_Task>
  SCH_Add_Task(run7SEG, 2000, 125);
 8000ff8:	227d      	movs	r2, #125	@ 0x7d
 8000ffa:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000ffe:	4808      	ldr	r0, [pc, #32]	@ (8001020 <main+0x7c>)
 8001000:	f000 f906 	bl	8001210 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Task() ;
 8001004:	f000 fad4 	bl	80015b0 <SCH_Dispatch_Task>
 8001008:	e7fc      	b.n	8001004 <main+0x60>
 800100a:	bf00      	nop
 800100c:	200000d0 	.word	0x200000d0
 8001010:	080005e5 	.word	0x080005e5
 8001014:	08000799 	.word	0x08000799
 8001018:	080009e1 	.word	0x080009e1
 800101c:	08000b6d 	.word	0x08000b6d
 8001020:	08000585 	.word	0x08000585

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b090      	sub	sp, #64	@ 0x40
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	2228      	movs	r2, #40	@ 0x28
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f001 ff46 	bl	8002ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001046:	230a      	movs	r3, #10
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104a:	2301      	movs	r3, #1
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104e:	2310      	movs	r3, #16
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001052:	2301      	movs	r3, #1
 8001054:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	4618      	mov	r0, r3
 8001060:	f000 ff76 	bl	8001f50 <HAL_RCC_OscConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800106a:	f000 f875 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106e:	230f      	movs	r3, #15
 8001070:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f001 f9e4 	bl	8002454 <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001092:	f000 f861 	bl	8001158 <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3740      	adds	r7, #64	@ 0x40
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010c6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80010ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010d4:	2209      	movs	r2, #9
 80010d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e4:	4813      	ldr	r0, [pc, #76]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010e6:	f001 fb11 	bl	800270c <HAL_TIM_Base_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010f0:	f000 f832 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	4619      	mov	r1, r3
 8001100:	480c      	ldr	r0, [pc, #48]	@ (8001134 <MX_TIM2_Init+0x94>)
 8001102:	f001 fc8f 	bl	8002a24 <HAL_TIM_ConfigClockSource>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800110c:	f000 f824 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_TIM2_Init+0x94>)
 800111e:	f001 fe67 	bl	8002df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001128:	f000 f816 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000d0 	.word	0x200000d0

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	  GPIO_Init();
 800113c:	f7ff fe18 	bl	8000d70 <GPIO_Init>
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	//timer_run();
	SCH_Update();
 800114c:	f000 f840 	bl	80011d0 <SCH_Update>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <Error_Handler+0x8>

08001164 <Get_New_Task_ID>:


//SCHEDULER STATIC FUNCTION
//static void TIMER_Init(void);

static uint32_t Get_New_Task_ID(void) {
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
   newTaskID++;
 8001168:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <Get_New_Task_ID+0x30>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <Get_New_Task_ID+0x30>)
 8001172:	801a      	strh	r2, [r3, #0]
   if (newTaskID == NO_TASK_ID)
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <Get_New_Task_ID+0x30>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d105      	bne.n	8001188 <Get_New_Task_ID+0x24>
   {
      newTaskID++;
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <Get_New_Task_ID+0x30>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <Get_New_Task_ID+0x30>)
 8001186:	801a      	strh	r2, [r3, #0]
   }
   return newTaskID;
 8001188:	4b02      	ldr	r3, [pc, #8]	@ (8001194 <Get_New_Task_ID+0x30>)
 800118a:	881b      	ldrh	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	20000398 	.word	0x20000398

08001198 <SCH_Init>:

void SCH_Init(){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 1; i <= SCH_MAX_TASKS; i++) {
 800119e:	2301      	movs	r3, #1
 80011a0:	71fb      	strb	r3, [r7, #7]
 80011a2:	e006      	b.n	80011b2 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f944 	bl	8001434 <SCH_Delete_Task>
	for (i = 1; i <= SCH_MAX_TASKS; i++) {
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	3301      	adds	r3, #1
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b28      	cmp	r3, #40	@ 0x28
 80011b6:	d9f5      	bls.n	80011a4 <SCH_Init+0xc>
	}
	 // Reset the global error variable
	 // − SCH_Delete_Task() will generate an error code,
	 // (because the task array is empty)
	 Error_code_G= 0;
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <SCH_Init+0x34>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
	 //Timer_init();
	 MX_IWDG_Init(); //Watchdog init
 80011be:	f000 fa63 	bl	8001688 <MX_IWDG_Init>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000039a 	.word	0x2000039a

080011d0 <SCH_Update>:



void SCH_Update(void){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    // check if there is a task at this location
    //count_SCH_Update++;
    if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0)
 80011d4:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <SCH_Update+0x3c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <SCH_Update+0x34>
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <SCH_Update+0x3c>)
 80011de:	7b1b      	ldrb	r3, [r3, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10f      	bne.n	8001204 <SCH_Update+0x34>
    {
       if (SCH_tasks_G[0].Delay > 0)
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <SCH_Update+0x3c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <SCH_Update+0x26>
       {
          SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <SCH_Update+0x3c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	4a06      	ldr	r2, [pc, #24]	@ (800120c <SCH_Update+0x3c>)
 80011f4:	6053      	str	r3, [r2, #4]
       }
       if (SCH_tasks_G[0].Delay == 0)
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <SCH_Update+0x3c>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <SCH_Update+0x34>
       {
          SCH_tasks_G[0].RunMe = 1;
 80011fe:	4b03      	ldr	r3, [pc, #12]	@ (800120c <SCH_Update+0x3c>)
 8001200:	2201      	movs	r2, #1
 8001202:	731a      	strb	r2, [r3, #12]
       }
    }
	Watchdog_Refresh();
 8001204:	f000 fa5a 	bl	80016bc <Watchdog_Refresh>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000118 	.word	0x20000118

08001210 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
	DELAY = DELAY/TICK ;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4a83      	ldr	r2, [pc, #524]	@ (800142c <SCH_Add_Task+0x21c>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	08db      	lsrs	r3, r3, #3
 8001226:	60bb      	str	r3, [r7, #8]
	PERIOD = PERIOD /TICK;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a80      	ldr	r2, [pc, #512]	@ (800142c <SCH_Add_Task+0x21c>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	08db      	lsrs	r3, r3, #3
 8001232:	607b      	str	r3, [r7, #4]
	uint16_t newTaskIndex = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	83fb      	strh	r3, [r7, #30]
    uint32_t sumDelay = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
    uint32_t newDelay = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]

    for (newTaskIndex ; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++)
 8001240:	e0e5      	b.n	800140e <SCH_Add_Task+0x1fe>
    {
       sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 8001242:	8bfb      	ldrh	r3, [r7, #30]
 8001244:	4a7a      	ldr	r2, [pc, #488]	@ (8001430 <SCH_Add_Task+0x220>)
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	4413      	add	r3, r2
 800124a:	3304      	adds	r3, #4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4413      	add	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
       if (sumDelay > DELAY)
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	429a      	cmp	r2, r3
 800125a:	f240 808f 	bls.w	800137c <SCH_Add_Task+0x16c>
       {
          newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 800125e:	8bfb      	ldrh	r3, [r7, #30]
 8001260:	4a73      	ldr	r2, [pc, #460]	@ (8001430 <SCH_Add_Task+0x220>)
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	4413      	add	r3, r2
 8001266:	3304      	adds	r3, #4
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	4413      	add	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
          SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 8001274:	8bfb      	ldrh	r3, [r7, #30]
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	1a8a      	subs	r2, r1, r2
 800127c:	496c      	ldr	r1, [pc, #432]	@ (8001430 <SCH_Add_Task+0x220>)
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	440b      	add	r3, r1
 8001282:	3304      	adds	r3, #4
 8001284:	601a      	str	r2, [r3, #0]
          for (uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--)
 8001286:	2327      	movs	r3, #39	@ 0x27
 8001288:	75fb      	strb	r3, [r7, #23]
 800128a:	e035      	b.n	80012f8 <SCH_Add_Task+0xe8>
          {
             SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	1e5a      	subs	r2, r3, #1
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	4967      	ldr	r1, [pc, #412]	@ (8001430 <SCH_Add_Task+0x220>)
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	440a      	add	r2, r1
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	4965      	ldr	r1, [pc, #404]	@ (8001430 <SCH_Add_Task+0x220>)
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	440b      	add	r3, r1
 80012a0:	601a      	str	r2, [r3, #0]
             SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	4961      	ldr	r1, [pc, #388]	@ (8001430 <SCH_Add_Task+0x220>)
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	440a      	add	r2, r1
 80012ae:	3208      	adds	r2, #8
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	495f      	ldr	r1, [pc, #380]	@ (8001430 <SCH_Add_Task+0x220>)
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	440b      	add	r3, r1
 80012b8:	3308      	adds	r3, #8
 80012ba:	601a      	str	r2, [r3, #0]
             SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	1e5a      	subs	r2, r3, #1
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	495b      	ldr	r1, [pc, #364]	@ (8001430 <SCH_Add_Task+0x220>)
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	440a      	add	r2, r1
 80012c8:	3204      	adds	r2, #4
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	4958      	ldr	r1, [pc, #352]	@ (8001430 <SCH_Add_Task+0x220>)
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	440b      	add	r3, r1
 80012d2:	3304      	adds	r3, #4
 80012d4:	601a      	str	r2, [r3, #0]
             SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	4954      	ldr	r1, [pc, #336]	@ (8001430 <SCH_Add_Task+0x220>)
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	440a      	add	r2, r1
 80012e2:	320e      	adds	r2, #14
 80012e4:	8811      	ldrh	r1, [r2, #0]
 80012e6:	4a52      	ldr	r2, [pc, #328]	@ (8001430 <SCH_Add_Task+0x220>)
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	4413      	add	r3, r2
 80012ec:	330e      	adds	r3, #14
 80012ee:	460a      	mov	r2, r1
 80012f0:	801a      	strh	r2, [r3, #0]
          for (uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--)
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	75fb      	strb	r3, [r7, #23]
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	8bfa      	ldrh	r2, [r7, #30]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d3c4      	bcc.n	800128c <SCH_Add_Task+0x7c>
          }
          SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8001302:	8bfb      	ldrh	r3, [r7, #30]
 8001304:	4a4a      	ldr	r2, [pc, #296]	@ (8001430 <SCH_Add_Task+0x220>)
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	4413      	add	r3, r2
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	601a      	str	r2, [r3, #0]
          SCH_tasks_G[newTaskIndex].Delay = newDelay;
 800130e:	8bfb      	ldrh	r3, [r7, #30]
 8001310:	4a47      	ldr	r2, [pc, #284]	@ (8001430 <SCH_Add_Task+0x220>)
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4413      	add	r3, r2
 8001316:	3304      	adds	r3, #4
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	601a      	str	r2, [r3, #0]
          SCH_tasks_G[newTaskIndex].Period = PERIOD;
 800131c:	8bfb      	ldrh	r3, [r7, #30]
 800131e:	4a44      	ldr	r2, [pc, #272]	@ (8001430 <SCH_Add_Task+0x220>)
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4413      	add	r3, r2
 8001324:	3308      	adds	r3, #8
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	601a      	str	r2, [r3, #0]

          if (SCH_tasks_G[newTaskIndex].Delay == 0)
 800132a:	8bfb      	ldrh	r3, [r7, #30]
 800132c:	4a40      	ldr	r2, [pc, #256]	@ (8001430 <SCH_Add_Task+0x220>)
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4413      	add	r3, r2
 8001332:	3304      	adds	r3, #4
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d107      	bne.n	800134a <SCH_Add_Task+0x13a>
          {
             SCH_tasks_G[newTaskIndex].RunMe = 1;
 800133a:	8bfb      	ldrh	r3, [r7, #30]
 800133c:	4a3c      	ldr	r2, [pc, #240]	@ (8001430 <SCH_Add_Task+0x220>)
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	4413      	add	r3, r2
 8001342:	330c      	adds	r3, #12
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e006      	b.n	8001358 <SCH_Add_Task+0x148>
          }
          else
          {
             SCH_tasks_G[newTaskIndex].RunMe = 0;
 800134a:	8bfb      	ldrh	r3, [r7, #30]
 800134c:	4a38      	ldr	r2, [pc, #224]	@ (8001430 <SCH_Add_Task+0x220>)
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	4413      	add	r3, r2
 8001352:	330c      	adds	r3, #12
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
          }
          SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8001358:	f7ff ff04 	bl	8001164 <Get_New_Task_ID>
 800135c:	4602      	mov	r2, r0
 800135e:	8bfb      	ldrh	r3, [r7, #30]
 8001360:	b291      	uxth	r1, r2
 8001362:	4a33      	ldr	r2, [pc, #204]	@ (8001430 <SCH_Add_Task+0x220>)
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4413      	add	r3, r2
 8001368:	330e      	adds	r3, #14
 800136a:	460a      	mov	r2, r1
 800136c:	801a      	strh	r2, [r3, #0]
          return SCH_tasks_G[newTaskIndex].TaskID;
 800136e:	8bfb      	ldrh	r3, [r7, #30]
 8001370:	4a2f      	ldr	r2, [pc, #188]	@ (8001430 <SCH_Add_Task+0x220>)
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	4413      	add	r3, r2
 8001376:	330e      	adds	r3, #14
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	e052      	b.n	8001422 <SCH_Add_Task+0x212>
       }
       else
       {
          if (SCH_tasks_G[newTaskIndex].pTask == 0x0000)
 800137c:	8bfb      	ldrh	r3, [r7, #30]
 800137e:	4a2c      	ldr	r2, [pc, #176]	@ (8001430 <SCH_Add_Task+0x220>)
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d13e      	bne.n	8001408 <SCH_Add_Task+0x1f8>
          {
             SCH_tasks_G[newTaskIndex].pTask = pFunction;
 800138a:	8bfb      	ldrh	r3, [r7, #30]
 800138c:	4a28      	ldr	r2, [pc, #160]	@ (8001430 <SCH_Add_Task+0x220>)
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	601a      	str	r2, [r3, #0]
             SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8001396:	8bfb      	ldrh	r3, [r7, #30]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	1a8a      	subs	r2, r1, r2
 800139e:	4924      	ldr	r1, [pc, #144]	@ (8001430 <SCH_Add_Task+0x220>)
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	440b      	add	r3, r1
 80013a4:	3304      	adds	r3, #4
 80013a6:	601a      	str	r2, [r3, #0]
             SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80013a8:	8bfb      	ldrh	r3, [r7, #30]
 80013aa:	4a21      	ldr	r2, [pc, #132]	@ (8001430 <SCH_Add_Task+0x220>)
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	4413      	add	r3, r2
 80013b0:	3308      	adds	r3, #8
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	601a      	str	r2, [r3, #0]
             if (SCH_tasks_G[newTaskIndex].Delay == 0)
 80013b6:	8bfb      	ldrh	r3, [r7, #30]
 80013b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001430 <SCH_Add_Task+0x220>)
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	4413      	add	r3, r2
 80013be:	3304      	adds	r3, #4
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d107      	bne.n	80013d6 <SCH_Add_Task+0x1c6>
             {
                SCH_tasks_G[newTaskIndex].RunMe = 1;
 80013c6:	8bfb      	ldrh	r3, [r7, #30]
 80013c8:	4a19      	ldr	r2, [pc, #100]	@ (8001430 <SCH_Add_Task+0x220>)
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	330c      	adds	r3, #12
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	e006      	b.n	80013e4 <SCH_Add_Task+0x1d4>
             }
             else
             {
                SCH_tasks_G[newTaskIndex].RunMe = 0;
 80013d6:	8bfb      	ldrh	r3, [r7, #30]
 80013d8:	4a15      	ldr	r2, [pc, #84]	@ (8001430 <SCH_Add_Task+0x220>)
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	4413      	add	r3, r2
 80013de:	330c      	adds	r3, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
             }
             SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80013e4:	f7ff febe 	bl	8001164 <Get_New_Task_ID>
 80013e8:	4602      	mov	r2, r0
 80013ea:	8bfb      	ldrh	r3, [r7, #30]
 80013ec:	b291      	uxth	r1, r2
 80013ee:	4a10      	ldr	r2, [pc, #64]	@ (8001430 <SCH_Add_Task+0x220>)
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	4413      	add	r3, r2
 80013f4:	330e      	adds	r3, #14
 80013f6:	460a      	mov	r2, r1
 80013f8:	801a      	strh	r2, [r3, #0]
             return SCH_tasks_G[newTaskIndex].TaskID;
 80013fa:	8bfb      	ldrh	r3, [r7, #30]
 80013fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001430 <SCH_Add_Task+0x220>)
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	4413      	add	r3, r2
 8001402:	330e      	adds	r3, #14
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	e00c      	b.n	8001422 <SCH_Add_Task+0x212>
    for (newTaskIndex ; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++)
 8001408:	8bfb      	ldrh	r3, [r7, #30]
 800140a:	3301      	adds	r3, #1
 800140c:	83fb      	strh	r3, [r7, #30]
 800140e:	8bfb      	ldrh	r3, [r7, #30]
 8001410:	2b27      	cmp	r3, #39	@ 0x27
 8001412:	f67f af16 	bls.w	8001242 <SCH_Add_Task+0x32>
          }
       }
    }
    return SCH_tasks_G[newTaskIndex].TaskID;
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <SCH_Add_Task+0x220>)
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	330e      	adds	r3, #14
 8001420:	881b      	ldrh	r3, [r3, #0]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	cccccccd 	.word	0xcccccccd
 8001430:	20000118 	.word	0x20000118

08001434 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t TaskID)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
    uint16_t Return_code = RETURN_SUCCCES;
 800143c:	2300      	movs	r3, #0
 800143e:	817b      	strh	r3, [r7, #10]
    uint16_t taskIndex;
    uint16_t j;

    if (TaskID != NO_TASK_ID)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80ab 	beq.w	800159e <SCH_Delete_Task+0x16a>
    {
       for (taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex++)
 8001448:	2300      	movs	r3, #0
 800144a:	81fb      	strh	r3, [r7, #14]
 800144c:	e0a3      	b.n	8001596 <SCH_Delete_Task+0x162>
       {
          if (SCH_tasks_G[taskIndex].TaskID == TaskID)
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	4a56      	ldr	r2, [pc, #344]	@ (80015ac <SCH_Delete_Task+0x178>)
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	330e      	adds	r3, #14
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4293      	cmp	r3, r2
 8001460:	f040 8096 	bne.w	8001590 <SCH_Delete_Task+0x15c>
          {
             Return_code = RETURN_ERROR; //ERROR FLAG
 8001464:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001468:	817b      	strh	r3, [r7, #10]
             if (taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1)
 800146a:	89fb      	ldrh	r3, [r7, #14]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01f      	beq.n	80014b0 <SCH_Delete_Task+0x7c>
 8001470:	89fb      	ldrh	r3, [r7, #14]
 8001472:	2b26      	cmp	r3, #38	@ 0x26
 8001474:	d81c      	bhi.n	80014b0 <SCH_Delete_Task+0x7c>
             {
                if (SCH_tasks_G[taskIndex + 1].pTask != 0x0000)
 8001476:	89fb      	ldrh	r3, [r7, #14]
 8001478:	3301      	adds	r3, #1
 800147a:	4a4c      	ldr	r2, [pc, #304]	@ (80015ac <SCH_Delete_Task+0x178>)
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d014      	beq.n	80014b0 <SCH_Delete_Task+0x7c>
                {
                   SCH_tasks_G[taskIndex + 1].Delay += SCH_tasks_G[taskIndex].Delay;
 8001486:	89fb      	ldrh	r3, [r7, #14]
 8001488:	3301      	adds	r3, #1
 800148a:	4a48      	ldr	r2, [pc, #288]	@ (80015ac <SCH_Delete_Task+0x178>)
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	4413      	add	r3, r2
 8001490:	3304      	adds	r3, #4
 8001492:	6819      	ldr	r1, [r3, #0]
 8001494:	89fb      	ldrh	r3, [r7, #14]
 8001496:	4a45      	ldr	r2, [pc, #276]	@ (80015ac <SCH_Delete_Task+0x178>)
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4413      	add	r3, r2
 800149c:	3304      	adds	r3, #4
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	89fb      	ldrh	r3, [r7, #14]
 80014a2:	3301      	adds	r3, #1
 80014a4:	440a      	add	r2, r1
 80014a6:	4941      	ldr	r1, [pc, #260]	@ (80015ac <SCH_Delete_Task+0x178>)
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	440b      	add	r3, r1
 80014ac:	3304      	adds	r3, #4
 80014ae:	601a      	str	r2, [r3, #0]
                }
             }
             for (j = taskIndex; j < SCH_MAX_TASKS - 1; j++)
 80014b0:	89fb      	ldrh	r3, [r7, #14]
 80014b2:	81bb      	strh	r3, [r7, #12]
 80014b4:	e043      	b.n	800153e <SCH_Delete_Task+0x10a>
             {
                SCH_tasks_G[j].pTask = SCH_tasks_G[j + 1].pTask;
 80014b6:	89bb      	ldrh	r3, [r7, #12]
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	89bb      	ldrh	r3, [r7, #12]
 80014bc:	493b      	ldr	r1, [pc, #236]	@ (80015ac <SCH_Delete_Task+0x178>)
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	440a      	add	r2, r1
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	4939      	ldr	r1, [pc, #228]	@ (80015ac <SCH_Delete_Task+0x178>)
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	440b      	add	r3, r1
 80014ca:	601a      	str	r2, [r3, #0]
                SCH_tasks_G[j].Period = SCH_tasks_G[j + 1].Period;
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	89bb      	ldrh	r3, [r7, #12]
 80014d2:	4936      	ldr	r1, [pc, #216]	@ (80015ac <SCH_Delete_Task+0x178>)
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	440a      	add	r2, r1
 80014d8:	3208      	adds	r2, #8
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	4933      	ldr	r1, [pc, #204]	@ (80015ac <SCH_Delete_Task+0x178>)
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	440b      	add	r3, r1
 80014e2:	3308      	adds	r3, #8
 80014e4:	601a      	str	r2, [r3, #0]
                SCH_tasks_G[j].Delay = SCH_tasks_G[j + 1].Delay;
 80014e6:	89bb      	ldrh	r3, [r7, #12]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	89bb      	ldrh	r3, [r7, #12]
 80014ec:	492f      	ldr	r1, [pc, #188]	@ (80015ac <SCH_Delete_Task+0x178>)
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	440a      	add	r2, r1
 80014f2:	3204      	adds	r2, #4
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	492d      	ldr	r1, [pc, #180]	@ (80015ac <SCH_Delete_Task+0x178>)
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	440b      	add	r3, r1
 80014fc:	3304      	adds	r3, #4
 80014fe:	601a      	str	r2, [r3, #0]
                SCH_tasks_G[j].RunMe = SCH_tasks_G[j + 1].RunMe;
 8001500:	89bb      	ldrh	r3, [r7, #12]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	89bb      	ldrh	r3, [r7, #12]
 8001506:	4929      	ldr	r1, [pc, #164]	@ (80015ac <SCH_Delete_Task+0x178>)
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	440a      	add	r2, r1
 800150c:	320c      	adds	r2, #12
 800150e:	7811      	ldrb	r1, [r2, #0]
 8001510:	4a26      	ldr	r2, [pc, #152]	@ (80015ac <SCH_Delete_Task+0x178>)
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	4413      	add	r3, r2
 8001516:	330c      	adds	r3, #12
 8001518:	460a      	mov	r2, r1
 800151a:	701a      	strb	r2, [r3, #0]
                SCH_tasks_G[j].TaskID = SCH_tasks_G[j + 1].TaskID;
 800151c:	89bb      	ldrh	r3, [r7, #12]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	89bb      	ldrh	r3, [r7, #12]
 8001522:	4922      	ldr	r1, [pc, #136]	@ (80015ac <SCH_Delete_Task+0x178>)
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	440a      	add	r2, r1
 8001528:	320e      	adds	r2, #14
 800152a:	8811      	ldrh	r1, [r2, #0]
 800152c:	4a1f      	ldr	r2, [pc, #124]	@ (80015ac <SCH_Delete_Task+0x178>)
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	4413      	add	r3, r2
 8001532:	330e      	adds	r3, #14
 8001534:	460a      	mov	r2, r1
 8001536:	801a      	strh	r2, [r3, #0]
             for (j = taskIndex; j < SCH_MAX_TASKS - 1; j++)
 8001538:	89bb      	ldrh	r3, [r7, #12]
 800153a:	3301      	adds	r3, #1
 800153c:	81bb      	strh	r3, [r7, #12]
 800153e:	89bb      	ldrh	r3, [r7, #12]
 8001540:	2b26      	cmp	r3, #38	@ 0x26
 8001542:	d9b8      	bls.n	80014b6 <SCH_Delete_Task+0x82>
             }
             SCH_tasks_G[j].pTask = 0;
 8001544:	89bb      	ldrh	r3, [r7, #12]
 8001546:	4a19      	ldr	r2, [pc, #100]	@ (80015ac <SCH_Delete_Task+0x178>)
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	4413      	add	r3, r2
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
             SCH_tasks_G[j].Period = 0;
 8001550:	89bb      	ldrh	r3, [r7, #12]
 8001552:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <SCH_Delete_Task+0x178>)
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	3308      	adds	r3, #8
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
             SCH_tasks_G[j].Delay = 0;
 800155e:	89bb      	ldrh	r3, [r7, #12]
 8001560:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <SCH_Delete_Task+0x178>)
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	4413      	add	r3, r2
 8001566:	3304      	adds	r3, #4
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
             SCH_tasks_G[j].RunMe = 0;
 800156c:	89bb      	ldrh	r3, [r7, #12]
 800156e:	4a0f      	ldr	r2, [pc, #60]	@ (80015ac <SCH_Delete_Task+0x178>)
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	4413      	add	r3, r2
 8001574:	330c      	adds	r3, #12
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
             SCH_tasks_G[j].TaskID = 0;
 800157a:	89bb      	ldrh	r3, [r7, #12]
 800157c:	4a0b      	ldr	r2, [pc, #44]	@ (80015ac <SCH_Delete_Task+0x178>)
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	4413      	add	r3, r2
 8001582:	330e      	adds	r3, #14
 8001584:	2200      	movs	r2, #0
 8001586:	801a      	strh	r2, [r3, #0]
             return Return_code = 0; //IF SUCCESS RETURN_CODE = 0
 8001588:	2300      	movs	r3, #0
 800158a:	817b      	strh	r3, [r7, #10]
 800158c:	2300      	movs	r3, #0
 800158e:	e008      	b.n	80015a2 <SCH_Delete_Task+0x16e>
       for (taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex++)
 8001590:	89fb      	ldrh	r3, [r7, #14]
 8001592:	3301      	adds	r3, #1
 8001594:	81fb      	strh	r3, [r7, #14]
 8001596:	89fb      	ldrh	r3, [r7, #14]
 8001598:	2b27      	cmp	r3, #39	@ 0x27
 800159a:	f67f af58 	bls.w	800144e <SCH_Delete_Task+0x1a>
          }
       }
    }
    return Return_code; // return status
 800159e:	897b      	ldrh	r3, [r7, #10]
 80015a0:	b2db      	uxtb	r3, r3
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000118 	.word	0x20000118

080015b0 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void){
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
    if (SCH_tasks_G[0].RunMe > 0)
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <SCH_Dispatch_Task+0x5c>)
 80015b8:	7b1b      	ldrb	r3, [r3, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d020      	beq.n	8001600 <SCH_Dispatch_Task+0x50>
    {
       (*SCH_tasks_G[0].pTask)(); // Run the task
 80015be:	4b13      	ldr	r3, [pc, #76]	@ (800160c <SCH_Dispatch_Task+0x5c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4798      	blx	r3
       SCH_tasks_G[0].RunMe = 0;  // Reset RunMe
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <SCH_Dispatch_Task+0x5c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	731a      	strb	r2, [r3, #12]
       sTask temtask = SCH_tasks_G[0];
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <SCH_Dispatch_Task+0x5c>)
 80015cc:	463c      	mov	r4, r7
 80015ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       SCH_Delete_Task(temtask.TaskID);
 80015d4:	89fb      	ldrh	r3, [r7, #14]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff2c 	bl	8001434 <SCH_Delete_Task>
       if (temtask.Period != 0)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00e      	beq.n	8001600 <SCH_Dispatch_Task+0x50>
       {
          SCH_Add_Task(temtask.pTask, temtask.Period*TICK, temtask.Period *TICK);
 80015e2:	6838      	ldr	r0, [r7, #0]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4619      	mov	r1, r3
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	461a      	mov	r2, r3
 80015fc:	f7ff fe08 	bl	8001210 <SCH_Add_Task>
       }
    }
	// Report system status
	SCH_Report_Status();
 8001600:	f000 f806 	bl	8001610 <SCH_Report_Status>
	// The scheduler enters idlemode at this point
	//SCH_Go_To_Sleep();
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	20000118 	.word	0x20000118

08001610 <SCH_Report_Status>:

void SCH_Go_To_Sleep(){}

void SCH_Report_Status(void) {
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
#ifdef SCH_REPORT_ERRORS
	//ONLYAPPLIES IFWEAREREPORTINGERRORS
	// Check for answer error code
	if (Error_code_G != Last_error_code_G) {
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <SCH_Report_Status+0x68>)
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	4b18      	ldr	r3, [pc, #96]	@ (800167c <SCH_Report_Status+0x6c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d016      	beq.n	800164e <SCH_Report_Status+0x3e>
		// Negative logic onLEDs assumed
		Error_port = 255 - Error_code_G;
 8001620:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <SCH_Report_Status+0x68>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	43db      	mvns	r3, r3
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <SCH_Report_Status+0x70>)
 800162a:	701a      	strb	r2, [r3, #0]
		Last_error_code_G = Error_code_G;
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <SCH_Report_Status+0x68>)
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <SCH_Report_Status+0x6c>)
 8001632:	701a      	strb	r2, [r3, #0]
		if (Error_code_G != 0){
 8001634:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <SCH_Report_Status+0x68>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <SCH_Report_Status+0x36>
			Error_tick_count_G= 60000;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <SCH_Report_Status+0x74>)
 800163e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001642:	801a      	strh	r2, [r3, #0]
				Error_code_G= 0; // Reset error code
			}
		}
	}
#endif
}
 8001644:	e014      	b.n	8001670 <SCH_Report_Status+0x60>
			Error_tick_count_G= 0;
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <SCH_Report_Status+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	801a      	strh	r2, [r3, #0]
}
 800164c:	e010      	b.n	8001670 <SCH_Report_Status+0x60>
		if (Error_tick_count_G != 0){
 800164e:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <SCH_Report_Status+0x74>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00c      	beq.n	8001670 <SCH_Report_Status+0x60>
			if (--Error_tick_count_G== 0) {
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <SCH_Report_Status+0x74>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <SCH_Report_Status+0x74>)
 8001660:	801a      	strh	r2, [r3, #0]
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <SCH_Report_Status+0x74>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <SCH_Report_Status+0x60>
				Error_code_G= 0; // Reset error code
 800166a:	4b03      	ldr	r3, [pc, #12]	@ (8001678 <SCH_Report_Status+0x68>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	2000039a 	.word	0x2000039a
 800167c:	2000039b 	.word	0x2000039b
 8001680:	2000039c 	.word	0x2000039c
 8001684:	2000039e 	.word	0x2000039e

08001688 <MX_IWDG_Init>:

//WATCHDOG
IWDG_HandleTypeDef hiwdg;
static uint32_t counter_for_watchdog = 0;

void MX_IWDG_Init(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
    hiwdg.Instance = IWDG;
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <MX_IWDG_Init+0x2c>)
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <MX_IWDG_Init+0x30>)
 8001690:	601a      	str	r2, [r3, #0]
    hiwdg.Init.Prescaler = IWDG_PRESCALER_32; // Chia tần số để định thời gian cho watchdog
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <MX_IWDG_Init+0x2c>)
 8001694:	2203      	movs	r2, #3
 8001696:	605a      	str	r2, [r3, #4]
    hiwdg.Init.Reload = 4095; // Giá trị reload để định thời gian
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <MX_IWDG_Init+0x2c>)
 800169a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800169e:	609a      	str	r2, [r3, #8]
    if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 80016a0:	4804      	ldr	r0, [pc, #16]	@ (80016b4 <MX_IWDG_Init+0x2c>)
 80016a2:	f000 fc01 	bl	8001ea8 <HAL_IWDG_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_IWDG_Init+0x28>
        Error_Handler(); // Gọi hàm xử lý lỗi nếu khởi tạo thất bại
 80016ac:	f7ff fd54 	bl	8001158 <Error_Handler>
    }
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200003a0 	.word	0x200003a0
 80016b8:	40003000 	.word	0x40003000

080016bc <Watchdog_Refresh>:



void Watchdog_Refresh(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
    HAL_IWDG_Refresh(&hiwdg); // Làm mới watchdog
 80016c0:	4802      	ldr	r0, [pc, #8]	@ (80016cc <Watchdog_Refresh+0x10>)
 80016c2:	f000 fc35 	bl	8001f30 <HAL_IWDG_Refresh>
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200003a0 	.word	0x200003a0

080016d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <HAL_MspInit+0x5c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	4a14      	ldr	r2, [pc, #80]	@ (800172c <HAL_MspInit+0x5c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6193      	str	r3, [r2, #24]
 80016e2:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_MspInit+0x5c>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <HAL_MspInit+0x5c>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a0e      	ldr	r2, [pc, #56]	@ (800172c <HAL_MspInit+0x5c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <HAL_MspInit+0x5c>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001706:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <HAL_MspInit+0x60>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <HAL_MspInit+0x60>)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40021000 	.word	0x40021000
 8001730:	40010000 	.word	0x40010000

08001734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001744:	d113      	bne.n	800176e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_TIM_Base_MspInit+0x44>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a0b      	ldr	r2, [pc, #44]	@ (8001778 <HAL_TIM_Base_MspInit+0x44>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_TIM_Base_MspInit+0x44>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	201c      	movs	r0, #28
 8001764:	f000 f9a5 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001768:	201c      	movs	r0, #28
 800176a:	f000 f9be 	bl	8001aea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <NMI_Handler+0x4>

08001784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <MemManage_Handler+0x4>

08001794 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017cc:	f000 f87e 	bl	80018cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <TIM2_IRQHandler+0x10>)
 80017da:	f001 f833 	bl	8002844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200000d0 	.word	0x200000d0

080017e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f4:	f7ff fff8 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f8:	480b      	ldr	r0, [pc, #44]	@ (8001828 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017fa:	490c      	ldr	r1, [pc, #48]	@ (800182c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001830 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a09      	ldr	r2, [pc, #36]	@ (8001834 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001810:	4c09      	ldr	r4, [pc, #36]	@ (8001838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181e:	f001 fb59 	bl	8002ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001822:	f7ff fbbf 	bl	8000fa4 <main>
  bx lr
 8001826:	4770      	bx	lr
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001830:	08002f60 	.word	0x08002f60
  ldr r2, =_sbss
 8001834:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001838:	200003b0 	.word	0x200003b0

0800183c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_2_IRQHandler>
	...

08001840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <HAL_Init+0x28>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <HAL_Init+0x28>)
 800184a:	f043 0310 	orr.w	r3, r3, #16
 800184e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001850:	2003      	movs	r0, #3
 8001852:	f000 f923 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001856:	200f      	movs	r0, #15
 8001858:	f000 f808 	bl	800186c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185c:	f7ff ff38 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40022000 	.word	0x40022000

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <HAL_InitTick+0x54>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <HAL_InitTick+0x58>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4619      	mov	r1, r3
 800187e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001882:	fbb3 f3f1 	udiv	r3, r3, r1
 8001886:	fbb2 f3f3 	udiv	r3, r2, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f93b 	bl	8001b06 <HAL_SYSTICK_Config>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e00e      	b.n	80018b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b0f      	cmp	r3, #15
 800189e:	d80a      	bhi.n	80018b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a0:	2200      	movs	r2, #0
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f000 f903 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ac:	4a06      	ldr	r2, [pc, #24]	@ (80018c8 <HAL_InitTick+0x5c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000070 	.word	0x20000070
 80018c4:	20000078 	.word	0x20000078
 80018c8:	20000074 	.word	0x20000074

080018cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_IncTick+0x1c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_IncTick+0x20>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	4a03      	ldr	r2, [pc, #12]	@ (80018ec <HAL_IncTick+0x20>)
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	20000078 	.word	0x20000078
 80018ec:	200003ac 	.word	0x200003ac

080018f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b02      	ldr	r3, [pc, #8]	@ (8001900 <HAL_GetTick+0x10>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	200003ac 	.word	0x200003ac

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800192c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4906      	ldr	r1, [pc, #24]	@ (800199c <__NVIC_EnableIRQ+0x34>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	@ (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	@ (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f7ff ff90 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff2d 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff42 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff90 	bl	80019f4 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5f 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff35 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa2 	bl	8001a58 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b08b      	sub	sp, #44	@ 0x2c
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	e161      	b.n	8001df8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b34:	2201      	movs	r2, #1
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f040 8150 	bne.w	8001df2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a97      	ldr	r2, [pc, #604]	@ (8001db4 <HAL_GPIO_Init+0x294>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d05e      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b5c:	4a95      	ldr	r2, [pc, #596]	@ (8001db4 <HAL_GPIO_Init+0x294>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d875      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b62:	4a95      	ldr	r2, [pc, #596]	@ (8001db8 <HAL_GPIO_Init+0x298>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d058      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b68:	4a93      	ldr	r2, [pc, #588]	@ (8001db8 <HAL_GPIO_Init+0x298>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d86f      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b6e:	4a93      	ldr	r2, [pc, #588]	@ (8001dbc <HAL_GPIO_Init+0x29c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d052      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b74:	4a91      	ldr	r2, [pc, #580]	@ (8001dbc <HAL_GPIO_Init+0x29c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d869      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b7a:	4a91      	ldr	r2, [pc, #580]	@ (8001dc0 <HAL_GPIO_Init+0x2a0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d04c      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b80:	4a8f      	ldr	r2, [pc, #572]	@ (8001dc0 <HAL_GPIO_Init+0x2a0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d863      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b86:	4a8f      	ldr	r2, [pc, #572]	@ (8001dc4 <HAL_GPIO_Init+0x2a4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d046      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b8c:	4a8d      	ldr	r2, [pc, #564]	@ (8001dc4 <HAL_GPIO_Init+0x2a4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d85d      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b92:	2b12      	cmp	r3, #18
 8001b94:	d82a      	bhi.n	8001bec <HAL_GPIO_Init+0xcc>
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d859      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba0 <HAL_GPIO_Init+0x80>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001c1b 	.word	0x08001c1b
 8001ba4:	08001bf5 	.word	0x08001bf5
 8001ba8:	08001c07 	.word	0x08001c07
 8001bac:	08001c49 	.word	0x08001c49
 8001bb0:	08001c4f 	.word	0x08001c4f
 8001bb4:	08001c4f 	.word	0x08001c4f
 8001bb8:	08001c4f 	.word	0x08001c4f
 8001bbc:	08001c4f 	.word	0x08001c4f
 8001bc0:	08001c4f 	.word	0x08001c4f
 8001bc4:	08001c4f 	.word	0x08001c4f
 8001bc8:	08001c4f 	.word	0x08001c4f
 8001bcc:	08001c4f 	.word	0x08001c4f
 8001bd0:	08001c4f 	.word	0x08001c4f
 8001bd4:	08001c4f 	.word	0x08001c4f
 8001bd8:	08001c4f 	.word	0x08001c4f
 8001bdc:	08001c4f 	.word	0x08001c4f
 8001be0:	08001c4f 	.word	0x08001c4f
 8001be4:	08001bfd 	.word	0x08001bfd
 8001be8:	08001c11 	.word	0x08001c11
 8001bec:	4a76      	ldr	r2, [pc, #472]	@ (8001dc8 <HAL_GPIO_Init+0x2a8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bf2:	e02c      	b.n	8001c4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	623b      	str	r3, [r7, #32]
          break;
 8001bfa:	e029      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	3304      	adds	r3, #4
 8001c02:	623b      	str	r3, [r7, #32]
          break;
 8001c04:	e024      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	623b      	str	r3, [r7, #32]
          break;
 8001c0e:	e01f      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	330c      	adds	r3, #12
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e01a      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c22:	2304      	movs	r3, #4
 8001c24:	623b      	str	r3, [r7, #32]
          break;
 8001c26:	e013      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d105      	bne.n	8001c3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c30:	2308      	movs	r3, #8
 8001c32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	611a      	str	r2, [r3, #16]
          break;
 8001c3a:	e009      	b.n	8001c50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	615a      	str	r2, [r3, #20]
          break;
 8001c46:	e003      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
          break;
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          break;
 8001c4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2bff      	cmp	r3, #255	@ 0xff
 8001c54:	d801      	bhi.n	8001c5a <HAL_GPIO_Init+0x13a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	e001      	b.n	8001c5e <HAL_GPIO_Init+0x13e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2bff      	cmp	r3, #255	@ 0xff
 8001c64:	d802      	bhi.n	8001c6c <HAL_GPIO_Init+0x14c>
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	e002      	b.n	8001c72 <HAL_GPIO_Init+0x152>
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	3b08      	subs	r3, #8
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	210f      	movs	r1, #15
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	401a      	ands	r2, r3
 8001c84:	6a39      	ldr	r1, [r7, #32]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80a9 	beq.w	8001df2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca0:	4b4a      	ldr	r3, [pc, #296]	@ (8001dcc <HAL_GPIO_Init+0x2ac>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a49      	ldr	r2, [pc, #292]	@ (8001dcc <HAL_GPIO_Init+0x2ac>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b47      	ldr	r3, [pc, #284]	@ (8001dcc <HAL_GPIO_Init+0x2ac>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cb8:	4a45      	ldr	r2, [pc, #276]	@ (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3d      	ldr	r2, [pc, #244]	@ (8001dd4 <HAL_GPIO_Init+0x2b4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00d      	beq.n	8001d00 <HAL_GPIO_Init+0x1e0>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3c      	ldr	r2, [pc, #240]	@ (8001dd8 <HAL_GPIO_Init+0x2b8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d007      	beq.n	8001cfc <HAL_GPIO_Init+0x1dc>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a3b      	ldr	r2, [pc, #236]	@ (8001ddc <HAL_GPIO_Init+0x2bc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <HAL_GPIO_Init+0x1d8>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e004      	b.n	8001d02 <HAL_GPIO_Init+0x1e2>
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e002      	b.n	8001d02 <HAL_GPIO_Init+0x1e2>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <HAL_GPIO_Init+0x1e2>
 8001d00:	2300      	movs	r3, #0
 8001d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d04:	f002 0203 	and.w	r2, r2, #3
 8001d08:	0092      	lsls	r2, r2, #2
 8001d0a:	4093      	lsls	r3, r2
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d12:	492f      	ldr	r1, [pc, #188]	@ (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	3302      	adds	r3, #2
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	492b      	ldr	r1, [pc, #172]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d3a:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	4927      	ldr	r1, [pc, #156]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d54:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4921      	ldr	r1, [pc, #132]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60cb      	str	r3, [r1, #12]
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d62:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	491d      	ldr	r1, [pc, #116]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d7c:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4917      	ldr	r1, [pc, #92]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4913      	ldr	r1, [pc, #76]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01f      	beq.n	8001de4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001da4:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	490d      	ldr	r1, [pc, #52]	@ (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
 8001db0:	e01f      	b.n	8001df2 <HAL_GPIO_Init+0x2d2>
 8001db2:	bf00      	nop
 8001db4:	10320000 	.word	0x10320000
 8001db8:	10310000 	.word	0x10310000
 8001dbc:	10220000 	.word	0x10220000
 8001dc0:	10210000 	.word	0x10210000
 8001dc4:	10120000 	.word	0x10120000
 8001dc8:	10110000 	.word	0x10110000
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	40010800 	.word	0x40010800
 8001dd8:	40010c00 	.word	0x40010c00
 8001ddc:	40011000 	.word	0x40011000
 8001de0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001de4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	4909      	ldr	r1, [pc, #36]	@ (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	3301      	adds	r3, #1
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f47f ae96 	bne.w	8001b34 <HAL_GPIO_Init+0x14>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	372c      	adds	r7, #44	@ 0x2c
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	40010400 	.word	0x40010400

08001e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	807b      	strh	r3, [r7, #2]
 8001e52:	4613      	mov	r3, r2
 8001e54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e56:	787b      	ldrb	r3, [r7, #1]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5c:	887a      	ldrh	r2, [r7, #2]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e62:	e003      	b.n	8001e6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	611a      	str	r2, [r3, #16]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e88:	887a      	ldrh	r2, [r7, #2]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	041a      	lsls	r2, r3, #16
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	400b      	ands	r3, r1
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e036      	b.n	8001f28 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001ecc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6852      	ldr	r2, [r2, #4]
 8001ed6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6892      	ldr	r2, [r2, #8]
 8001ee0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001ee2:	f7ff fd05 	bl	80018f0 <HAL_GetTick>
 8001ee6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001ee8:	e011      	b.n	8001f0e <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001eea:	f7ff fd01 	bl	80018f0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 323c 	movw	r2, #4924	@ 0x133c
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d908      	bls.n	8001f0e <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e00c      	b.n	8001f28 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1e6      	bne.n	8001eea <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001f24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001f40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e272      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8087 	beq.w	800207e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f70:	4b92      	ldr	r3, [pc, #584]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d00c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f7c:	4b8f      	ldr	r3, [pc, #572]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d112      	bne.n	8001fae <HAL_RCC_OscConfig+0x5e>
 8001f88:	4b8c      	ldr	r3, [pc, #560]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f94:	d10b      	bne.n	8001fae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f96:	4b89      	ldr	r3, [pc, #548]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d06c      	beq.n	800207c <HAL_RCC_OscConfig+0x12c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d168      	bne.n	800207c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e24c      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x76>
 8001fb8:	4b80      	ldr	r3, [pc, #512]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a7f      	ldr	r2, [pc, #508]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e02e      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x98>
 8001fce:	4b7b      	ldr	r3, [pc, #492]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a7a      	ldr	r2, [pc, #488]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b78      	ldr	r3, [pc, #480]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a77      	ldr	r2, [pc, #476]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e01d      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0xbc>
 8001ff2:	4b72      	ldr	r3, [pc, #456]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a71      	ldr	r2, [pc, #452]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b6f      	ldr	r3, [pc, #444]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6e      	ldr	r2, [pc, #440]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 800200c:	4b6b      	ldr	r3, [pc, #428]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6a      	ldr	r2, [pc, #424]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b68      	ldr	r3, [pc, #416]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a67      	ldr	r2, [pc, #412]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002022:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fc60 	bl	80018f0 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff fc5c 	bl	80018f0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	@ 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e200      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b5d      	ldr	r3, [pc, #372]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0xe4>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fc4c 	bl	80018f0 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fc48 	bl	80018f0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	@ 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1ec      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	4b53      	ldr	r3, [pc, #332]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x10c>
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d063      	beq.n	8002152 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208a:	4b4c      	ldr	r3, [pc, #304]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002096:	4b49      	ldr	r3, [pc, #292]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d11c      	bne.n	80020dc <HAL_RCC_OscConfig+0x18c>
 80020a2:	4b46      	ldr	r3, [pc, #280]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	4b43      	ldr	r3, [pc, #268]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x176>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e1c0      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c6:	4b3d      	ldr	r3, [pc, #244]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4939      	ldr	r1, [pc, #228]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	e03a      	b.n	8002152 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e4:	4b36      	ldr	r3, [pc, #216]	@ (80021c0 <HAL_RCC_OscConfig+0x270>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff fc01 	bl	80018f0 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff fbfd 	bl	80018f0 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1a1      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	4b2d      	ldr	r3, [pc, #180]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b2a      	ldr	r3, [pc, #168]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4927      	ldr	r1, [pc, #156]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
 8002124:	e015      	b.n	8002152 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002126:	4b26      	ldr	r3, [pc, #152]	@ (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fbe0 	bl	80018f0 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002134:	f7ff fbdc 	bl	80018f0 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e180      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	4b1d      	ldr	r3, [pc, #116]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d03a      	beq.n	80021d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d019      	beq.n	800219a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002166:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <HAL_RCC_OscConfig+0x274>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7ff fbc0 	bl	80018f0 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002174:	f7ff fbbc 	bl	80018f0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e160      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	4b0d      	ldr	r3, [pc, #52]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002192:	2001      	movs	r0, #1
 8002194:	f000 fa9c 	bl	80026d0 <RCC_Delay>
 8002198:	e01c      	b.n	80021d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_RCC_OscConfig+0x274>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7ff fba6 	bl	80018f0 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a6:	e00f      	b.n	80021c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff fba2 	bl	80018f0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d908      	bls.n	80021c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e146      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	42420000 	.word	0x42420000
 80021c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	4b92      	ldr	r3, [pc, #584]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e9      	bne.n	80021a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a6 	beq.w	800232e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10d      	bne.n	800220e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	4b88      	ldr	r3, [pc, #544]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a87      	ldr	r2, [pc, #540]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	61d3      	str	r3, [r2, #28]
 80021fe:	4b85      	ldr	r3, [pc, #532]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	4b82      	ldr	r3, [pc, #520]	@ (8002418 <HAL_RCC_OscConfig+0x4c8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	4b7f      	ldr	r3, [pc, #508]	@ (8002418 <HAL_RCC_OscConfig+0x4c8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7e      	ldr	r2, [pc, #504]	@ (8002418 <HAL_RCC_OscConfig+0x4c8>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7ff fb63 	bl	80018f0 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7ff fb5f 	bl	80018f0 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	@ 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e103      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b75      	ldr	r3, [pc, #468]	@ (8002418 <HAL_RCC_OscConfig+0x4c8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x312>
 8002254:	4b6f      	ldr	r3, [pc, #444]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a6e      	ldr	r2, [pc, #440]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	e02d      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x334>
 800226a:	4b6a      	ldr	r3, [pc, #424]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4a69      	ldr	r2, [pc, #420]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	6213      	str	r3, [r2, #32]
 8002276:	4b67      	ldr	r3, [pc, #412]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a66      	ldr	r2, [pc, #408]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	e01c      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d10c      	bne.n	80022a6 <HAL_RCC_OscConfig+0x356>
 800228c:	4b61      	ldr	r3, [pc, #388]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4a60      	ldr	r2, [pc, #384]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	6213      	str	r3, [r2, #32]
 8002298:	4b5e      	ldr	r3, [pc, #376]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a5d      	ldr	r2, [pc, #372]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	e00b      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 80022a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4a5a      	ldr	r2, [pc, #360]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	6213      	str	r3, [r2, #32]
 80022b2:	4b58      	ldr	r3, [pc, #352]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a57      	ldr	r2, [pc, #348]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d015      	beq.n	80022f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c6:	f7ff fb13 	bl	80018f0 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7ff fb0f 	bl	80018f0 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0b1      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ee      	beq.n	80022ce <HAL_RCC_OscConfig+0x37e>
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7ff fafd 	bl	80018f0 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7ff faf9 	bl	80018f0 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e09b      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	4b40      	ldr	r3, [pc, #256]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ee      	bne.n	80022fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002322:	4b3c      	ldr	r3, [pc, #240]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	4a3b      	ldr	r2, [pc, #236]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800232c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8087 	beq.w	8002446 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002338:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b08      	cmp	r3, #8
 8002342:	d061      	beq.n	8002408 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d146      	bne.n	80023da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234c:	4b33      	ldr	r3, [pc, #204]	@ (800241c <HAL_RCC_OscConfig+0x4cc>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7ff facd 	bl	80018f0 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235a:	f7ff fac9 	bl	80018f0 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e06d      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	4b29      	ldr	r3, [pc, #164]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002380:	d108      	bne.n	8002394 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002382:	4b24      	ldr	r3, [pc, #144]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4921      	ldr	r1, [pc, #132]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002394:	4b1f      	ldr	r3, [pc, #124]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a19      	ldr	r1, [r3, #32]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	430b      	orrs	r3, r1
 80023a6:	491b      	ldr	r1, [pc, #108]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ac:	4b1b      	ldr	r3, [pc, #108]	@ (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7ff fa9d 	bl	80018f0 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ba:	f7ff fa99 	bl	80018f0 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e03d      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x46a>
 80023d8:	e035      	b.n	8002446 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fa86 	bl	80018f0 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7ff fa82 	bl	80018f0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e026      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x498>
 8002406:	e01e      	b.n	8002446 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d107      	bne.n	8002420 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e019      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
 800241c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_RCC_OscConfig+0x500>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	429a      	cmp	r2, r3
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000

08002454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0d0      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b6a      	ldr	r3, [pc, #424]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d910      	bls.n	8002498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b67      	ldr	r3, [pc, #412]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 0207 	bic.w	r2, r3, #7
 800247e:	4965      	ldr	r1, [pc, #404]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b63      	ldr	r3, [pc, #396]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0b8      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b0:	4b59      	ldr	r3, [pc, #356]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a58      	ldr	r2, [pc, #352]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c8:	4b53      	ldr	r3, [pc, #332]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a52      	ldr	r2, [pc, #328]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b50      	ldr	r3, [pc, #320]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	494d      	ldr	r1, [pc, #308]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d040      	beq.n	8002574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b47      	ldr	r3, [pc, #284]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d115      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e07f      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002512:	4b41      	ldr	r3, [pc, #260]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e073      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	4b3d      	ldr	r3, [pc, #244]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e06b      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002532:	4b39      	ldr	r3, [pc, #228]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f023 0203 	bic.w	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4936      	ldr	r1, [pc, #216]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002544:	f7ff f9d4 	bl	80018f0 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	e00a      	b.n	8002562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7ff f9d0 	bl	80018f0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e053      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 020c 	and.w	r2, r3, #12
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	429a      	cmp	r2, r3
 8002572:	d1eb      	bne.n	800254c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002574:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d210      	bcs.n	80025a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	4922      	ldr	r1, [pc, #136]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b20      	ldr	r3, [pc, #128]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e032      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b0:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4916      	ldr	r1, [pc, #88]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ce:	4b12      	ldr	r3, [pc, #72]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	490e      	ldr	r1, [pc, #56]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025e2:	f000 f821 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	490a      	ldr	r1, [pc, #40]	@ (800261c <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	5ccb      	ldrb	r3, [r1, r3]
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	4a09      	ldr	r2, [pc, #36]	@ (8002620 <HAL_RCC_ClockConfig+0x1cc>)
 80025fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025fe:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <HAL_RCC_ClockConfig+0x1d0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff f932 	bl	800186c <HAL_InitTick>

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40022000 	.word	0x40022000
 8002618:	40021000 	.word	0x40021000
 800261c:	08002f34 	.word	0x08002f34
 8002620:	20000070 	.word	0x20000070
 8002624:	20000074 	.word	0x20000074

08002628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002642:	4b1e      	ldr	r3, [pc, #120]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b04      	cmp	r3, #4
 8002650:	d002      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x30>
 8002652:	2b08      	cmp	r3, #8
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x36>
 8002656:	e027      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800265a:	613b      	str	r3, [r7, #16]
      break;
 800265c:	e027      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	0c9b      	lsrs	r3, r3, #18
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	4a17      	ldr	r2, [pc, #92]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002668:	5cd3      	ldrb	r3, [r2, r3]
 800266a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d010      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002676:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	0c5b      	lsrs	r3, r3, #17
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	4a11      	ldr	r2, [pc, #68]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a0d      	ldr	r2, [pc, #52]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800268a:	fb03 f202 	mul.w	r2, r3, r2
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e004      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a0c      	ldr	r2, [pc, #48]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	613b      	str	r3, [r7, #16]
      break;
 80026a6:	e002      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026aa:	613b      	str	r3, [r7, #16]
      break;
 80026ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ae:	693b      	ldr	r3, [r7, #16]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	007a1200 	.word	0x007a1200
 80026c4:	08002f44 	.word	0x08002f44
 80026c8:	08002f54 	.word	0x08002f54
 80026cc:	003d0900 	.word	0x003d0900

080026d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <RCC_Delay+0x34>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <RCC_Delay+0x38>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0a5b      	lsrs	r3, r3, #9
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026ec:	bf00      	nop
  }
  while (Delay --);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	60fa      	str	r2, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f9      	bne.n	80026ec <RCC_Delay+0x1c>
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	20000070 	.word	0x20000070
 8002708:	10624dd3 	.word	0x10624dd3

0800270c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e041      	b.n	80027a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe fffe 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f000 fa56 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d001      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e035      	b.n	8002830 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a16      	ldr	r2, [pc, #88]	@ (800283c <HAL_TIM_Base_Start_IT+0x90>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_TIM_Base_Start_IT+0x4e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ee:	d004      	beq.n	80027fa <HAL_TIM_Base_Start_IT+0x4e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a12      	ldr	r2, [pc, #72]	@ (8002840 <HAL_TIM_Base_Start_IT+0x94>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d111      	bne.n	800281e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b06      	cmp	r3, #6
 800280a:	d010      	beq.n	800282e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281c:	e007      	b.n	800282e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0201 	orr.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40000400 	.word	0x40000400

08002844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d020      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0202 	mvn.w	r2, #2
 8002878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f998 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 8002894:	e005      	b.n	80028a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f98b 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f99a 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d020      	beq.n	80028f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01b      	beq.n	80028f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0204 	mvn.w	r2, #4
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f972 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f965 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f974 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d020      	beq.n	8002940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0208 	mvn.w	r2, #8
 8002910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2204      	movs	r2, #4
 8002916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f94c 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f93f 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f94e 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d020      	beq.n	800298c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0210 	mvn.w	r2, #16
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2208      	movs	r2, #8
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f926 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f919 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f928 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00c      	beq.n	80029b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0201 	mvn.w	r2, #1
 80029a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe fbca 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00c      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa6f 	bl	8002eb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8f8 	bl	8002be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0220 	mvn.w	r2, #32
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa42 	bl	8002ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_TIM_ConfigClockSource+0x1c>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0b4      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x186>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a78:	d03e      	beq.n	8002af8 <HAL_TIM_ConfigClockSource+0xd4>
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a7e:	f200 8087 	bhi.w	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a86:	f000 8086 	beq.w	8002b96 <HAL_TIM_ConfigClockSource+0x172>
 8002a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a8e:	d87f      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002a90:	2b70      	cmp	r3, #112	@ 0x70
 8002a92:	d01a      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0xa6>
 8002a94:	2b70      	cmp	r3, #112	@ 0x70
 8002a96:	d87b      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002a98:	2b60      	cmp	r3, #96	@ 0x60
 8002a9a:	d050      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x11a>
 8002a9c:	2b60      	cmp	r3, #96	@ 0x60
 8002a9e:	d877      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa0:	2b50      	cmp	r3, #80	@ 0x50
 8002aa2:	d03c      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0xfa>
 8002aa4:	2b50      	cmp	r3, #80	@ 0x50
 8002aa6:	d873      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa8:	2b40      	cmp	r3, #64	@ 0x40
 8002aaa:	d058      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x13a>
 8002aac:	2b40      	cmp	r3, #64	@ 0x40
 8002aae:	d86f      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab0:	2b30      	cmp	r3, #48	@ 0x30
 8002ab2:	d064      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002ab4:	2b30      	cmp	r3, #48	@ 0x30
 8002ab6:	d86b      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d060      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d867      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d05c      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d05a      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002ac8:	e062      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ada:	f000 f96a 	bl	8002db2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	609a      	str	r2, [r3, #8]
      break;
 8002af6:	e04f      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b08:	f000 f953 	bl	8002db2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b1a:	609a      	str	r2, [r3, #8]
      break;
 8002b1c:	e03c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f000 f8ca 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2150      	movs	r1, #80	@ 0x50
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f921 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e02c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f000 f8e8 	bl	8002d20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2160      	movs	r1, #96	@ 0x60
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f911 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b5c:	e01c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f000 f8aa 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2140      	movs	r1, #64	@ 0x40
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f901 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b7c:	e00c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f000 f8f8 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b8e:	e003      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e000      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
	...

08002bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a2b      	ldr	r2, [pc, #172]	@ (8002cbc <TIM_Base_SetConfig+0xc0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d007      	beq.n	8002c24 <TIM_Base_SetConfig+0x28>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c1a:	d003      	beq.n	8002c24 <TIM_Base_SetConfig+0x28>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a28      	ldr	r2, [pc, #160]	@ (8002cc0 <TIM_Base_SetConfig+0xc4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d108      	bne.n	8002c36 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a20      	ldr	r2, [pc, #128]	@ (8002cbc <TIM_Base_SetConfig+0xc0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d007      	beq.n	8002c4e <TIM_Base_SetConfig+0x52>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c44:	d003      	beq.n	8002c4e <TIM_Base_SetConfig+0x52>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc0 <TIM_Base_SetConfig+0xc4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d108      	bne.n	8002c60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a0d      	ldr	r2, [pc, #52]	@ (8002cbc <TIM_Base_SetConfig+0xc0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d103      	bne.n	8002c94 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f023 0201 	bic.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	40012c00 	.word	0x40012c00
 8002cc0:	40000400 	.word	0x40000400

08002cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0201 	bic.w	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f023 030a 	bic.w	r3, r3, #10
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f023 0210 	bic.w	r2, r3, #16
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	031b      	lsls	r3, r3, #12
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	621a      	str	r2, [r3, #32]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b085      	sub	sp, #20
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f043 0307 	orr.w	r3, r3, #7
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b087      	sub	sp, #28
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	021a      	lsls	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	609a      	str	r2, [r3, #8]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e041      	b.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a14      	ldr	r2, [pc, #80]	@ (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d009      	beq.n	8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e54:	d004      	beq.n	8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a10      	ldr	r2, [pc, #64]	@ (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d10c      	bne.n	8002e7a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40000400 	.word	0x40000400

08002ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <memset>:
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4402      	add	r2, r0
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d100      	bne.n	8002ece <memset+0xa>
 8002ecc:	4770      	bx	lr
 8002ece:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed2:	e7f9      	b.n	8002ec8 <memset+0x4>

08002ed4 <__libc_init_array>:
 8002ed4:	b570      	push	{r4, r5, r6, lr}
 8002ed6:	2600      	movs	r6, #0
 8002ed8:	4d0c      	ldr	r5, [pc, #48]	@ (8002f0c <__libc_init_array+0x38>)
 8002eda:	4c0d      	ldr	r4, [pc, #52]	@ (8002f10 <__libc_init_array+0x3c>)
 8002edc:	1b64      	subs	r4, r4, r5
 8002ede:	10a4      	asrs	r4, r4, #2
 8002ee0:	42a6      	cmp	r6, r4
 8002ee2:	d109      	bne.n	8002ef8 <__libc_init_array+0x24>
 8002ee4:	f000 f81a 	bl	8002f1c <_init>
 8002ee8:	2600      	movs	r6, #0
 8002eea:	4d0a      	ldr	r5, [pc, #40]	@ (8002f14 <__libc_init_array+0x40>)
 8002eec:	4c0a      	ldr	r4, [pc, #40]	@ (8002f18 <__libc_init_array+0x44>)
 8002eee:	1b64      	subs	r4, r4, r5
 8002ef0:	10a4      	asrs	r4, r4, #2
 8002ef2:	42a6      	cmp	r6, r4
 8002ef4:	d105      	bne.n	8002f02 <__libc_init_array+0x2e>
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}
 8002ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efc:	4798      	blx	r3
 8002efe:	3601      	adds	r6, #1
 8002f00:	e7ee      	b.n	8002ee0 <__libc_init_array+0xc>
 8002f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f06:	4798      	blx	r3
 8002f08:	3601      	adds	r6, #1
 8002f0a:	e7f2      	b.n	8002ef2 <__libc_init_array+0x1e>
 8002f0c:	08002f58 	.word	0x08002f58
 8002f10:	08002f58 	.word	0x08002f58
 8002f14:	08002f58 	.word	0x08002f58
 8002f18:	08002f5c 	.word	0x08002f5c

08002f1c <_init>:
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	bf00      	nop
 8002f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f22:	bc08      	pop	{r3}
 8002f24:	469e      	mov	lr, r3
 8002f26:	4770      	bx	lr

08002f28 <_fini>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	bf00      	nop
 8002f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2e:	bc08      	pop	{r3}
 8002f30:	469e      	mov	lr, r3
 8002f32:	4770      	bx	lr
